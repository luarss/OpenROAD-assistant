{"page_content": "[![Build Status](\n[![Coverity Scan Status](\n[![Documentation Status](\n[![CII Best Practices](", "metadata": {"Header 1": "OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD is the leading open-source, foundational application for", "metadata": {"Header 1": "OpenROAD", "Header 2": "About OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "semiconductor digital design. The OpenROAD flow delivers an", "metadata": {"Header 1": "OpenROAD", "Header 2": "About OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Autonomous, No-Human-In-Loop (NHIL) flow, 24 hour turnaround from", "metadata": {"Header 1": "OpenROAD", "Header 2": "About OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "RTL-GDSII for rapid design exploration and physical design implementation.", "metadata": {"Header 1": "OpenROAD", "Header 2": "About OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[OpenROAD]( eliminates the barriers", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of cost, schedule risk and uncertainty in hardware design to promote", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "open access to rapid, low-cost IC design software and expertise and", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "system innovation. The OpenROAD application enables flexible flow", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "control through an API with bindings in Tcl and Python.", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD is used in research and commercial applications such as,\n- [OpenROAD-flow-scripts](", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "from [OpenROAD](\n- [OpenLane]( from\n[Efabless](\n- [Silicon Compiler](\nfrom [Zero ASIC](\n- [Hammer](", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- [Hammer](\nfrom [UC Berkeley](\n- [OpenFASoC]( from\n[IDEA-FASoC]( for mixed-signal design flows", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD fosters a vibrant ecosystem of users through active", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "collaboration and partnership through software development and key", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "alliances. Our growing user community includes hardware designers,", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "software engineers, industry collaborators, VLSI enthusiasts,\nstudents and researchers.", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD strongly advocates and enables IC design-based education", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and workforce development initiatives through training content and", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "courses across several global universities, the Google-SkyWater\n[shuttles]( also", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[shuttles]( also\nincludes GlobalFoundries shuttles, design contests and IC design", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "workshops. The OpenROAD flow has been successfully used to date", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in over 600 silicon-ready tapeouts for technologies up to 12nm.", "metadata": {"Header 1": "OpenROAD", "Header 2": "OpenROAD Mission", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD provides [OpenROAD-flow-scripts](", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "as a native, ready-to-use prototyping and tapeout flow. However,", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "it also enables the creation of any custom flow controllers based", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "on the underlying tools, database and analysis engines. Please refer to the flow documentation", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "flow documentation [here](", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD-flow-scripts (ORFS) is a fully autonomous, RTL-GDSII flow", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for rapid architecture and design space exploration, early prediction", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of QoR and detailed physical design implementation. However, ORFS", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "also enables manual intervention for finer user control of individual", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "flow stages through Tcl commands and Python APIs.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Figure below shows the main stages of the OpenROAD-flow-scripts:", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Here are the main steps for a physical design implementation\nusing OpenROAD;  \n- `Floorplanning`", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `Floorplanning`\n- Floorplan initialization - define the chip area, utilization", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- IO pin placement (for designs without pads)\n- Tap cell and well tie insertion", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- PDN- power distribution network creation\n- `Global Placement` - Minimize wirelengths", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Macro placement (RAMs, embedded macros)\n- Standard cell placement", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Automatic placement optimization and repair for max slew,", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "max capacitance, and max fanout violations and long wires\n- `Detailed Placement`", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Legalize placement - align to grid, adhere to design rules", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Incremental timing analysis for early estimates", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `Clock Tree Synthesis` - Generate a balanced tree to meet timing\nand reduce skews", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and reduce skews\n- Insert buffers and resize for high fanout nets\n- `Optimize setup/hold timing`", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `Global routing`\n- Antenna repair\n- Create routing guides\n- `Detailed routing`", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Legalize routes, DRC-correct routing to meet timing, power\nconstraints\n- `Chip Finishing`", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `Chip Finishing`\n- Parasitic extraction using OpenRCX\n- Final timing verification", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Final physical verification\n- Dummy metal fill for manufacturability", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Use KLayout or Magic using generated GDS for DRC signoff", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD GUI is a powerful visualization, analysis, and debugging", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool with a customizable Tcl interface. The below figures show GUI views for", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "various flow stages including floorplanning, placement congestion,\nCTS and post-routed design.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![ibex_floorplan.webp](./docs/images/ibex_floorplan.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "Header 4": "Floorplan", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![Ariane133](./docs/images/ariane133_mpl2.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "Header 4": "Automatic Hierarchical Macro Placement", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![pl_congestion.webp](./docs/images/pl_congestion.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "Header 4": "Placement Congestion Visualization", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![clk_routing.webp](./docs/images/clk_routing.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "Header 4": "CTS", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![ibex_routing.webp](./docs/images/ibex_routing.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "GUI", "Header 4": "Routing", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD application is PDK independent. However, it has been tested", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and validated with specific PDKs in the context of various flow\ncontrollers.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "controllers.  \nOpenLane supports SkyWater 130nm and GlobalFoundries 180nm.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD-flow-scripts supports several public and private PDKs\nincluding:", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `GF180` - 180nm\n-   `SKY130` - 130nm\n-   `Nangate45` - 45nm\n-   `ASAP7` - Predictive FinFET 7nm", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Open-Source PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "These PDKS are supported in OpenROAD-flow-scripts only. They are used to", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "test and calibrate OpenROAD against commercial platforms and ensure good", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "QoR. The PDKs and platform-specific files for these kits cannot be", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "provided due to NDA restrictions. However, if you are able to access", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "these platforms independently, you can create the necessary\nplatform-specific files yourself.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `GF55` - 55nm\n-   `GF12` - 12nm\n-   `Intel22` - 22nm\n-   `Intel16` - 16nm\n-   `TSMC65` - 65nm", "metadata": {"Header 1": "OpenROAD", "Header 2": "Getting Started with OpenROAD-flow-scripts", "Header 3": "PDK Support", "Header 4": "Proprietary PDKs", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD has been used for full physical implementation in over", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "600 tapeouts in SKY130 and GF180 through the Google-sponsored,\nEfabless [MPW shuttle](", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and [ChipIgnite]( programs.  \n![shuttle.webp](./docs/images/shuttle.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![OpenTitan_SoC.webp](./docs/images/OpenTitan_SoC.webp)", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "Header 3": "OpenTitan SoC on GF12LP - Physical design and optimization using OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD project actively adds successfully taped out MPW shuttle\ndesigns to the [CI regression", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "Header 3": "Continuous Tapeout Integration into CI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "testing](\nExamples of designs include Open processor cores, RISC-V based SoCs,", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "Header 3": "Continuous Tapeout Integration into CI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "cryptocurrency miners, robotic app processors, amateur satellite radio", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "Header 3": "Continuous Tapeout Integration into CI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "transceivers, OpenPower-based Microwatt etc.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Tapeouts", "Header 3": "Continuous Tapeout Integration into CI", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To build OpenROAD tools locally in your machine, follow steps\nfrom [here](docs/user/Build.md).", "metadata": {"Header 1": "OpenROAD", "Header 2": "Build OpenROAD", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of executable regression test scripts in `./test/`.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Regression Tests", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The flow tests check results such as worst slack against reference values.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Regression Tests", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use `report_flow_metrics [test]...` to see all of the metrics.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Regression Tests", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To update a failing regression, follow the instructions below:", "metadata": {"Header 1": "OpenROAD", "Header 2": "Regression Tests", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD sources the Tcl command file `~/.openroad` unless the command", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "line option `-no_init` is specified.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD then sources the command file `cmd_file` if it is specified on", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the command line. Unless the `-exit` command line flag is specified, it", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "enters an interactive Tcl command interpreter.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A list of the available tools/modules included in the OpenROAD app", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and their descriptions are available [here](docs/contrib/Logger.md#openroad-tool-list).", "metadata": {"Header 1": "OpenROAD", "Header 2": "Run", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD uses Git for version control and contributions.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Git Quickstart", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Get familiarised with a quickstart tutorial to contribution [here](docs/contrib/GitGuide.md).", "metadata": {"Header 1": "OpenROAD", "Header 2": "Git Quickstart", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Seeing OpenROAD warnings or errors you do not understand? We have compiled a table of all messages", "metadata": {"Header 1": "OpenROAD", "Header 2": "Understanding Warning and Error Messages", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and you may potentially find your answer [here](", "metadata": {"Header 1": "OpenROAD", "Header 2": "Understanding Warning and Error Messages", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "OpenROAD", "Header 2": "License", "source": "README.md", "file_path": "README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This documentation is available at [", "metadata": {"Header 1": "OpenROAD Documentation", "source": "docs/README.md", "file_path": "docs/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Python 3.x\n- Pip\n- `virtualenv`", "metadata": {"Header 1": "OpenROAD Documentation", "Header 2": "Build locally", "Header 3": "Requires:", "source": "docs/README.md", "file_path": "docs/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD (\"Foundations and Realization of Open, Accessible Design\")", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "project was launched in June 2018 within the DARPA IDEA program. OpenROAD", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "aims to bring down the barriers of cost, expertise and unpredictability that", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "currently block designers' access to hardware implementation in advanced", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "technologies. The project team (Qualcomm, Arm and multiple universities and", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "partners, led by UC San Diego) is developing a fully autonomous, open-source", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool chain for digital SoC layout generation, focusing on", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the RTL-to-GDSII phase of system-on-chip design. Thus,", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD holistically attacks the multiple facets of today's design cost", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "crisis: engineering resources, design tool licenses, project schedule,\nand risk.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and risk.  \nThe IDEA program targets no-human-in-loop (NHIL) design, with 24-hour", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "turnaround time and zero loss of power-performance-area (PPA) design quality.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The NHIL target requires tools to adapt and auto-tune successfully to flow", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "completion, without (or, with minimal) human intervention. Machine", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "intelligence augments human expertise through efficient modeling and", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "prediction of flow and optimization outcomes throughout the synthesis, placement", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and routing process. This is complemented by development of metrics", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and machine learning infrastructure.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The 24-hour runtime target implies that problems must be strategically", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "decomposed throughout the design process, with clustered and partitioned", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "subproblems being solved and recomposed through intelligent distribution", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and management of computational resources. This ensures that the NHIL design", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "optimization is performed within its available `[threads * hours]` \"box\" of", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "resources. Decomposition that enables parallel and distributed search over", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "cloud resources incurs a quality-of-results loss, but this is subsequently", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "recovered through improved flow predictability and enhanced optimization.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For a technical description of the OpenROAD flow, please refer to our DAC-2019 paper:", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[Toward an Open-Source Digital Flow: First Learnings from the OpenROAD Project](", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The paper is also available from [ACM Digital Library](\nOther publications and presentations are", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "linked [here](", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD Project has two releases:", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Application ([github]( ([docs](main/README.md)): The application is a standalone binary for", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "binary for digital place and route that can be used by any other RTL-GDSII flow controller.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Flow ([github]( ([docs]( This is the native OpenROAD flow that consists of a set of integrated", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a set of integrated scripts for an autonomous RTL-GDSII flow using OpenROAD and other open-source", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "other open-source tools.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Documentation", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Please read our code of conduct [here](main/CODE_OF_CONDUCT.md).", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "Code of conduct", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you are willing to **contribute**, see the", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[Getting Involved](contrib/GettingInvolved.md) section.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you are a **developer** with EDA background, learn more about how you", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "can use OpenROAD as the infrastructure for your tools in the", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[Developer Guide](contrib/DeveloperGuide.md) section.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD uses Git for version control and contributions.", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Get familiarised with a quickstart tutorial to contribution [here](contrib/GitGuide.md).", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to contribute", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "We maintain the following channels for communication:  \n-   Project homepage and news: <", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to get in touch", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Twitter: <\n-   Issues and bugs:\n-   OpenROAD: <\n-   Discussions:\n-   OpenROAD: <", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to get in touch", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenROAD: <\n-   Inquiries: openroad@eng.ucsd.edu  \nSee also our [FAQs](user/FAQS.md).", "metadata": {"Header 1": "Welcome to OpenROAD's documentation!", "Header 2": "How to get in touch", "source": "docs/index.md", "file_path": "docs/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD is run using Tcl scripts. The following commands are used to read\nand write design data.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use the Tcl `source` command to read commands from a file.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If an error is encountered in a command while reading the command file,", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "then the error is printed and no more commands are read from the file. If", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`file_continue_on_error` is `1` then OpenROAD will continue reading commands\nafter the error.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "after the error.  \nIf `exit_on_error` is `1` then OpenROAD will exit when it encounters an error.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD can be used to make a OpenDB database from LEF/DEF, or Verilog", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(flat or hierarchical). Once the database is made it can be saved as a file", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with the `write_db` command. OpenROAD can then read the database with the", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`read_db` command without reading LEF/DEF or Verilog.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `read_lef` and `read_def` commands can be used to build an OpenDB database", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "as shown below. The `read_lef -tech` flag reads the technology portion of a", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "LEF file.  The `read_lef -library` flag reads the MACROs in the LEF file.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If neither of the `-tech` and `-library` flags are specified they default", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to `-tech -library` if no technology has been read and `-library` if a", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "technology exists in the database.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `read_verilog` command is used to build an OpenDB database as shown", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "below. Multiple Verilog files for a hierarchical design can be read.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `link_design` command is used to flatten the design and make a database.", "metadata": {"Header 1": "OpenROAD", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts demonstrating how to run OpenROAD on sample designs can", "metadata": {"Header 1": "OpenROAD", "Header 2": "Example scripts", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be found in /test. Flow tests taking sample designs from synthesizable RTL Verilog", "metadata": {"Header 1": "OpenROAD", "Header 2": "Example scripts", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to detail-routed final layout in the open-source technologies Nangate45 and Sky130HD are", "metadata": {"Header 1": "OpenROAD", "Header 2": "Example scripts", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "shown below.  \nEach of these designs use the common script `flow.tcl`.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Example scripts", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD contains an abstract LEF writer that can take your current design", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and emit an abstract LEF representing the external pins of your design and\nmetal obstructions.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Switch Name | Description |\n| ----- | ----- |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-bloat_factor` | Specifies the bloat factor used when bloating then merging shapes into LEF", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "shapes into LEF obstructions. The factor is measured in # of default metal pitches for the", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "pitches for the respective layer. A factor of `0` will result in detailed LEF obstructions |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-bloat_occupied_layers` | Generates cover obstructions (obstructions over the entire layer) for", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "entire layer) for each layer where shapes are present |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `add_global_connection` command is used to specify how to connect power and ground pins on", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and ground pins on design instances to the appropriate supplies.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Switch Name | Description |\n| ----- | ----- |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-net` | Specifies the name of the net in the design to which connections are to be added |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-inst_pattern` | Optional specifies a regular expression to select a set of instances from the", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instances from the design. (Default: .\\*) |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-pin_pattern` | Species a regular expression to select pins on the selected instances to connect", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to connect to the specified net |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-power` | Specifies that the net it a power net |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-ground` | Specifies that the net is a ground net |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-region` | Specifies the name of the region for this rule |", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Add global connections", "Header 5": "Options", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `global_connect` command is used to connect power and ground pins on design instances to the", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Perform global connections", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instances to the appropriate supplies.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Perform global connections", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `clear_global_connect` command is used remove all defined global connection rules.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Clear global connection rules", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `report_global_connect` command is used print out the currently defined global connection rules.", "metadata": {"Header 1": "OpenROAD", "Header 2": "Abstract LEF Support", "Header 3": "Global Connections", "Header 4": "Report global connection rules", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Get the die and core areas as a list in microns: `llx lly urx ury`", "metadata": {"Header 1": "OpenROAD", "Header 2": "TCL functions", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "OpenROAD", "Header 2": "FAQs", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License.", "metadata": {"Header 1": "OpenROAD", "Header 2": "License", "source": "src/README.md", "file_path": "src/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This document describes the pipelines available to the developers and code", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "maintainers in the [Jenkins server]( Note", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that pipelines with the suffix `*-Private` are only available to code", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "maintainers and The OpenROAD Project members as they can contain confidential", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "information. Thus, to access Private pipelines one needs to have authorization", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to access confidential data and be logged in the Jenkins website.", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Below there is a list of the available features. Instructions on how to", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "navigate Jenkins to access these features are available\n[here](", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[here](  \n-   Find your build through Jenkins website or from GitHub.", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   See test status: Pass/Fail.\n-   Log files for each test.", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Build artifacts to reproduce failures.\n-   HTML reports about code coverage and metrics.", "metadata": {"Header 1": "CI Guide", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenROAD-Coverage-Public\n-   Description: run dynamic code coverage tool `lconv`.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Target: master branch.\n-   Report link [here](\n-   OpenROAD-Coverity-Public", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Description: compile and submit builds to Coverity static code analysis\ntool.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool.\n-   Target: master branch.\n-   Report link [here](\n-   OpenROAD-Nightly-Public", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Description: `openroad` unit tests, docker builds, ISPD 2018 and 2019", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "benchmarks for DRT and large unit tests of GPL.\n-   Target: master branch.\n-   OpenROAD-Public", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenROAD-Public\n-   Description: `openroad` unit tests and docker builds.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Target: all branches and open PRs.\n-   OpenROAD-Special-Private", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Description: for developer testing, runs ISPD 2018 and 2019 benchmarks", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for DRT and large unit tests of GPL.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Target branches: `TR_*`, `secure-TR_*`, `TR-*`, `secure-TR-*`.\n-   OpenROAD-Private", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Description: `openroad` unit tests and docker builds.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Target: all branches. Note that PRs will be run on public side after", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"Ready to Sync Public\" workflow.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD App", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-  Information about OpenROAD Flow CI jobs can be found [here](", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenROAD Flow", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenLane-MPW-CI-Public", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenLane", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Description: test projects to older MPW shuttles with newer OpenLane versions.\n-   [Repo link](", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenLane", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   [Repo link](\n-   OpenLane-Public", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenLane", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenLane-Public\n-   Description: test OpenLane with latest commit from OpenROAD.", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenLane", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   [Repo link](", "metadata": {"Header 1": "CI Guide", "Header 2": "OpenLane", "source": "docs/contrib/CI.md", "file_path": "docs/contrib/CI.md", "file_name": "CI.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "List of coding practices.  \n:::{Note}", "metadata": {"Header 1": "Coding Practices", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": ":::{Note}\nThis is a compilation of many idioms in OpenROAD code that are considered undesirable.", "metadata": {"Header 1": "Coding Practices", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": ":::", "metadata": {"Header 1": "Coding Practices", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't comment out code, instead remove it.\n`git` provides a complete history of", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #1", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the code if you want to look backwards. Huge chunks of commented-out", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #1", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "code make it difficult to read.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #1", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use prefixes on function names or variables. That's what\nnamespaces are for.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #2", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Namespaces should be all lower case and short. This is an example of a", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #3", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "poor choice: `namespace TritonCTS`", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #3", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use `extern` on function definitions. It is pointless\nin a world with prototypes.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #4", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use prefixes on file names. That's what directories are for.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #5", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't name variables `theThingy`, `curThingy` or `myThingy`. It is just", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #6", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "distracting extraneous verbiage. Just use `thingy`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #6", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not use global variables. All state should be inside of classes.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #7", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Global variables make multi-threading next to impossible and preclude", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #7", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "having multiple copies of a tool running in the same process. The only", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #7", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "global variable in `openroad` should be the singleton that Tcl commands\nreference.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #7", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not use strings (names) to refer to database or sta objects except in", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #8", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "user interface code. DEF, SDC, and Verilog all use different names for", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #8", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "netlist instances and nets, so the names will not always match.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #8", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not use continue. Wrap the body in an if instead.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #9", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't put magic numbers in the code. Use a variable with a name that", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #10", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "captures the intent. Document the units if they exist.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #10", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't copy code fragments. Write functions.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #11", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use logical operators to test for null pointers.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #12", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use `malloc`. Use `new`. We are writing C++, not C.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #13", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use C style arrays. There is no bounds checks for them so they", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #14", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "invite subtle memory errors to unwitting programmers who fail to use", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #14", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`valgrind`. Use `std::vector` or `std::array`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #14", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Break long functions into smaller ones, preferably that fit on one\nscreen.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #15", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't reinvent functions like `round`, `floor`, `abs`, `min`, `max`. Use the std\nversions.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #16", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use C's stdlib.h `abs`, `fabs` or `fabsf`. They fail miserably if the", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #17", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "wrong arg type is passed to them. Use `std::abs`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #17", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Fold code common to multiple loops into the same loop. Each of these", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #18", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "functions loops over every instance like this:", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #18", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Instead make one pass over the instances doing each check.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #18", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use `== true`, or `== false`. Boolean expressions already have a\nvalue of true or false.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #19", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't nest if statements. Use `&&` on the clauses instead.  \nis simply", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #20", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't call return at the end of a function that does not return a\nvalue.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #21", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use `<>` to include anything but system headers. Your", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #22", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "project's headers should never be in `<>`.\n1. [GCC Include Syntax](", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #22", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. [StackOverflow discussion on \"filename\" vs \\<filename\\>](  \nThese are all wrong:", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #22", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't make \"include the kitchen sink\" headers and include them in", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "every source file. This is convenient but slows the builds down", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for everyone. Make each source file include just the headers it actually\nneeds.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "needs.  \nNote this example also incorrectly uses `<>'s` around OpenROAD headers.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Header files should only include files to support the header. Include", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "files necessary for code in the code file, not the header.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In the example below NONE of the system files listed are necessary for\nthe header file.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #23", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use class declarations if you are only referring to objects by pointer", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #24", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instead of including their complete class definition. This can vastly", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #24", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "reduce the code the compiler has to process.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #24", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use pragma once instead of `#define` to protect headers from being read", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #25", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "more than once. The #define symbol has to be unique, which is difficult\nto guarantee.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #25", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't put `using namespace` inside a function.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #26", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't nest namespaces.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #27", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Avoid `using namespace`. It increases the likelihood of conflicts", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #28", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and doesn't explicity declare what in the namespace is being used. Use", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #28", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`using namespace::symbol;` instead. And especially do not use `using namespace std`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #28", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The following is especially confused because it is trying to \"use\" the", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #28", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "symbols in code that are already in the MacroPlace namespace.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #28", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use `nullptr` instead of `NULL`. This is the C++\napproved version of the ancient C `#define`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #29", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use range iteration. C++ iterators are ugly and verbose.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #30", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use end of line comments unless they are very short.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #31", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't `std::pow` for powers of 2 or for decimal constants.", "metadata": {"Header 1": "Coding Practices", "Header 2": "C++", "Header 3": "Practice #32", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't put /'s in `.gitignore` directory names.\n`test/`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #33", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't put file names in `.gitignore` ignored directories.\n`test/results` `test/results/diffs`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #34", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't list compile artifacts in `.gitignore`. They all end", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "up in the build directory so each file type does not have to appear in\n`.gitignore`.", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`.gitignore`.  \nAll of the following are to be avoided:", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`*.slo *.lo *.o *.obj`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "Header 4": "Compiled Object files", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`*.gch *.pch`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "Header 4": "Precompiled Headers", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`*.so *.dylib *.dll`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "Header 4": "Compiled Dynamic libraries", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`*.mod *.smod`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "Header 4": "Fortran module files", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`*.lai *.la *.a *.lib`", "metadata": {"Header 1": "Coding Practices", "Header 2": "Git", "Header 3": "Practice #35", "Header 4": "Compiled Static libraries", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't change compile flags in `cmake` files. These are set at the top", "metadata": {"Header 1": "Coding Practices", "Header 2": "CMake", "Header 3": "Practice #35", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "level and should not be overridden.", "metadata": {"Header 1": "Coding Practices", "Header 2": "CMake", "Header 3": "Practice #35", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't put /'s in CMake directory names. CMake knows they are directories.", "metadata": {"Header 1": "Coding Practices", "Header 2": "CMake", "Header 3": "Practice #36", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Don't use `glob`. Explictly list the files in a group.", "metadata": {"Header 1": "Coding Practices", "Header 2": "CMake", "Header 3": "Practice #37", "source": "docs/contrib/CodingPractices.md", "file_path": "docs/contrib/CodingPractices.md", "file_name": "CodingPractices.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "DEF defines the units it uses with the `UNITS` command.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Typically the units are 1000 or 2000 database units (DBU) per micron.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "DBUs are integers, so the distance resolution is typically 0.001 um or\n1nm.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1nm.  \nOpenDB uses an `int` to represent a DBU, which on most hardware is 4", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "bytes. This means a database coordinate can be $\\pm 2147483647$, which is", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "about $2 \\cdot 10^9$ units, corresponding to $2 \\cdot 10^6$ or $2$ meters.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Introduction", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This section is important as we cover important math considerations for", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "your datatype choice when dealing with large numbers.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Since chip coordinates cannot be negative, it would make sense to use an", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`unsigned int` to represent a distance. This conveys the fact that it", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "can never be negative and doubles the maximum possible distance that can", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be represented. The problem, however, is that doing subtraction with unsigned numbers", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is dangerous because the differences can be negative. An unsigned", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "negative number looks like a very very big number. So this is a very bad\nidea and leads to bugs.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Note that calculating an area with `int` values is problematic. An", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`int * int` does not fit in an `int`. **Our suggestion is to use `int64_t`", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in this situation.** Although `long` \"works\", its size is implementation-dependent.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not pure int?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "It has been noticed that some programs use `double` to calculate distances.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This can be problematic, as `double` have a mantissa of 52 bits, which means that", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the largest possible integer value that can be represented without loss is $5\\cdot 10^{15}$.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This is 12 bits less than the largest possible integer value that can be represented", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by an `int64_t`. As a result, if you are doing an area calculation on a large chip", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that is more than $\\sqrt{5\\cdot 10^{15}} = 7\\cdot 10^7\\ DBU$ on a side, the mantissa of the", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "double will overflow and the result will be truncated.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Not only is a `double` less capable than an `int64_t`, but using it", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tells any reader of the code that the value can be a real number, such as", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "$104.23$. So it is extremely misleading.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not double?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Circling back to LEF, we see that unlike DEF the distances are real", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "numbers like 1.3 even though LEF also has a distance unit statement. We", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "suspect this is a historical artifact of a mistake made in the early", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "definition of the LEF file format. The reason it is a mistake is because", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "decimal fractions cannot be represented exactly in binary floating-point.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For example, $1.1 = 1.00011001100110011...$, a continued fraction.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenDB uses `int` to represent LEF distances, just as with DEF. This solves", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the problem by multiplying distances by a decimal constant (distance", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "units) to convert the distance to an integer. In the future I would like", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to see OpenDB use a `dbu` typedef instead of `int` everywhere.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Use int only for LEF/DEF Distances", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "We have also noticed RePlAce, OpenDP, TritonMacroPlace and OpenNPDN all using", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`double` or `float` to represent distances. This can be problematic, as", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "floating-point numbers cannot always represent exact fractions. As a result,", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "these tools need to `round` or `floor` the results of their calculations, which", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "can introduce errors. Additionally, some of these tools reinvent the wheel", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by implementing their own rounding functions, as we shall see in the example below.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This can lead to inconsistencies and is highly discouraged.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Worse than using a `double` is using a `float`, because the mantissa", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is only 23 bits, so the maximum exactly representable integer is $8\\cdot 10^6$.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This makes it even less capable than an `int`.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When a value has to be snapped to a grid such as the pitch of a layer,", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the calculation can be done with a simple divide using `int`, which", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`floor` the result. For example, to snap a coordinate to the pitch of a", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "layer the following can be used:  \nThe use of rounding in existing code that uses floating-point", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "representations is to compensate for the inability to represent floating-point", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "fractions exactly. Results like $5.99999999992$ need to be \"fixed\".", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This problem does not exist if fixed-point arithmetic is used.", "metadata": {"Header 1": "Database Math 101", "Header 2": "Datatype Choice", "Header 3": "Why not float?", "source": "docs/contrib/DatabaseMath.md", "file_path": "docs/contrib/DatabaseMath.md", "file_name": "DatabaseMath.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD is a tool to build a chip from synthesizable RTL (Verilog) to", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "completed physical layout (manufacturable, tapeout-clean GDSII).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The unifying principle behind the design of OpenROAD is for all of the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tools to reside in one tool, with one process, and one database. All", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tools in the flow should use Tcl commands exclusively to control them", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instead of external \"configuration files\". File-based communication", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "between tools and forking processes is strongly discouraged. This", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "architecture streamlines the construction of a flexible tool flow and", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "minimizes the overhead of invoking each tool in the flow.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Philosophy", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Every tool follows the following file structure, grouping sources, tests\nand headers together.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `src/`\nThis folder contains the source files for individual tools.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `src`           | Purpose |\n|-----------------|--------------|", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `CMakeLists.txt`  | `add_subdirectory` for each tool|", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `tool/src`       | sources and private headers |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `tool/src/CMakeLists.txt` | tool specific CMake file |\n| `tool/include/tool` | exported headers |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `tool/test`       | tool tests |\n| `tool/regression` | tool unit tests|  \n- OpenROAD repository:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This folder contains the top-level files for overall compilation. OpenROAD uses [swig]( that acts", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[swig]( that acts as a wrapper for C/C++ programs to be callable in higher-level languages, such as", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "languages, such as Python and Tcl.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `OpenROAD`      | Purpose |\n|-----------------|--------------|", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `CMakeLists.txt` | top-level CMake file |\n| `src/Main.cc`   | main file  |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `src/OpenROAD.cc` | OpenROAD class functions |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `src/OpenROAD.i`  | top-level swig, includes, tool swig files |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `src/OpenROAD.tcl` | basic read/write lef/def/db commands |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `include/ord/OpenROAD.hh` | OpenROAD top-level class, has instances of tools |", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Some tools such as OpenSTA are submodules, which are simply", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "subdirectories in `src/` that are pointers to the git submodule. They are", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "intentionally not segregated into a separate module.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The use of submodules for new code integrated into OpenROAD is strongly", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "discouraged. Submodules make changes to the underlying infrastructure", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(e.g., OpenSTA) difficult to propagate across the dependent submodule\nrepositories.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "repositories.  \nWhere external/third-party code that a tool depends on should be placed", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "depends on the nature of the dependency.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Libraries - code packaged as a linkable library. Examples are `tcl`,", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`boost`, `zlib`, `eigen`, `lemon`, `spdlog`.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "These should be installed in the build environment and linked by", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD. Document these dependencies in the top-level `README.md` file.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `Dockerfile` should be updated to illustrate where to find the library", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and how to install it. Adding libraries to the build environment requires", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "coordination with system administrators, so that continuous integration hosts ensure", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that environments include the dependency. Advance notification", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "should also be given to the development team so that their private build", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "environments can be updated.  \nEach tool CMake file builds a library that is linked by the OpenROAD", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "application. The tools should not define a `main()` function. If the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool is Tcl only and has no C++ code, it does not need to have a CMake", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file. Tool CMake files should **not** include the following:  \n- `cmake_minimum_required`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `GCC_COVERAGE_COMPILE_FLAGS`\n- `GCC_COVERAGE_LINK_FLAGS`\n- `CMAKE_CXX_FLAGS`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `CMAKE_CXX_FLAGS`\n- `CMAKE_EXE_LINKER_FLAGS`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "None of the tools have commands to read or write LEF, DEF, Verilog or", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "database files. For consistency, these functions are all provided by the OpenROAD\nframework.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "framework.  \nTools should package all of their state in a single class. An instance of each", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool class resides in the top-level OpenROAD object. This allows", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "multiple tools to exist at the same time. If any tool keeps state in", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "global variables (even static), then only one tool can exist at a time. Many", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the tools being integrated were not built with this goal in mind and", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "will only work on one design at a time.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Each tool should use a unique namespace for all of its code. The same", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "namespace should be used for Tcl functions, including those defined by a", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "swig interface file. Internal Tcl commands stay inside the namespace,", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and user visible Tcl commands should be defined in the global namespace.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "User commands should be simple Tcl commands such as `global_placement`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that do not create tool instances that must be based to the commands.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Defining Tcl commands for a tool class is fine for internal commands, but not", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for user visible commands. Commands have an implicit argument of the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "current OpenROAD class object. Functions to get individual tools from", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the OpenROAD object can be defined.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool File Organization", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD class has pointers to each tool, with functions to get each", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool. Each tool has (at a minimum) a function to make an instance of the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool class, an initialization function that is called after all of", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the tools have been made, and a function to delete the tool. This small", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "header does **not** include the class definition for the tool so that", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the OpenROAD framework does not have to know anything about the tool", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "internals or include a gigantic header file.  \n`MakeTool.hh` defines the following:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `OpenRoad::init()` function calls all of the `makeTool` functions and", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "then all of the `initTool()` functions. The `init` functions are called from", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the bottom of the tool dependencies. Each `init` function grabs the state", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "it needs out of the `OpenRoad` instance.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Initialization (C++ tools only)", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tools should report errors to the user using the `ord::error` function", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "defined in `include/openroad/Error.hh`. `ord::error` throws", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`ord::Exception`. The variables `ord::exit_on_error` and", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`ord::file_continue_on_error` control how the error is handled. If", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`ord::exit_on_error` is `true` then OpenROAD reports the error and exits. If", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the error is encountered while reading a file with the `source` or", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`read_sdc` commands and `ord::file_continue_on_error` is `false` then no", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "other commands are read from the file. The default value is `false` for both\nvariables.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Errors", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Each \"tool\" has a `/test` directory containing a script named", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`regression` to run \"unit\" tests. With no arguments it should run\ndefault unit tests.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "No database files should be in tests. Read LEF/DEF/Verilog to make a\ndatabase.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "database.  \nThe regression script should not depend on the current working", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "directory. It should be able to be run from any directory. Use filenames", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "relative to the script name rather the current working directory.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Regression scripts should print a concise summary of test failures. The", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "regression script should return an exit code of 0 if there are no", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "errors and 1 if there are errors. The script should **not** print", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "thousands of lines of internal tool information.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Regression scripts should pass the `-no_init` option to `openroad` so that", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a user's `init` file is not sourced before the tests runs.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Regression scripts should add output files or directories to", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`.gitignore` so that running does not leave the source repository\n\"dirty\".", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"dirty\".  \nThe Nangate45 open-source library data used by many tests is in", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`test/Nangate45`. Use the following command to add a link in the tool command:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "After the link is installed, the test script can read the Liberty file", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with the command shown below.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Test", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Instructions for building are available [here](../user/Build.md).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Building", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The patch file \"AddTool.patch\" illustrates how to add a tool to", "metadata": {"Header 1": "Developer Guide", "Header 2": "Example of Adding a Tool to OpenROAD", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD. Use the following commands to add a sample tool:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Example of Adding a Tool to OpenROAD", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This adds a directory `OpenRoad/src/tool` that", "metadata": {"Header 1": "Developer Guide", "Header 2": "Example of Adding a Tool to OpenROAD", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "illustrates a tool named \"Tool\" that uses the file structure described above", "metadata": {"Header 1": "Developer Guide", "Header 2": "Example of Adding a Tool to OpenROAD", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and defines a command to run the tool with keyword and flag arguments as\nillustrated below:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Example of Adding a Tool to OpenROAD", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tool commands should be documented in the top-level OpenROAD `README.md`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Documentation", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file. Detailed documentation should be the `tool/README.md` file.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Documentation", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tool namespaces are usually three-lettered lowercase letters.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Verilog to DB ([dbSTA](../main/src/dbSta/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- OpenDB: Open Database ([odb](../main/src/odb/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- TritonPart: constraints-driven paritioner ([par](../main/src/par/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Floorplan Initialization ([ifp](../main/src/ifp/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ICeWall chip-level connections\u0013 ([pad](../main/src/pad/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- I/O Placement ([ppl](../main/src/ppl/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- PDN Generation ([pdn](../main/src/pdn/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Tapcell and Welltie Insertion ([tap](../main/src/tap/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Triton Macro Placer ([mpl](../main/src/mpl/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Hierarchical Automatic Macro Placer ([mpl2](../main/src/mpl2/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- RePlAce Global Placer ([gpl](../main/src/gpl/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Gate resizing and buffering ([rsz](../main/src/rsz/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Detailed placement ([dpl](../main/src/dpl/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Clock tree synthesis ([cts](../main/src/cts/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- FastRoute Global routing ([grt](../main/src/grt/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Antenna check and diode insertion ([ant](../main/src/ant/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- TritonRoute Detailed routing ([drt](../main/src/drt/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Metal fill insertion ([fin](../main/src/fin/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Design for Test ([dst](../main/src/dst/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- OpenRCX Parasitic Extraction ([rcx](../main/src/rcx/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- OpenSTA timing/power report ([sta](../main/src/sta/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Graphical User Interface ([gui](../main/src/gui/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Static IR analyser ([psm](../main/src/psm/README.md))", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Flow Namespace", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tools should make every attempt to minimize external dependencies.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Linking libraries other than those currently in use complicates the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "builds and sacrifices the portability of OpenROAD. OpenROAD should be", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "portable to many different compiler/operating system versions and", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "dependencies make this vastly more complicated.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. OpenROAD submodules reference tool `openroad` branch head. No git `develop`, `openroad_app`, or", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`openroad_app`, or `openroad_build` branches.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Submodules used by more than one tool belong in `src/`, not duplicated in each tool repo.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `CMakeLists.txt` does not use add_compile_options include_directories link_directories", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "link_directories link_libraries. Use target\\_ versions instead. See tips [here](", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `CMakeLists.txt` does not use glob. Use explicit lists of source files and headers instead.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `CMakeLists.txt` does not define `CFLAGS` `CMAKE_CXX_FLAGS` `CMAKE_CXX_FLAGS_DEBUG`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`CMAKE_CXX_FLAGS_RELEASE`. Let the top level and defaults control these.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. No `main.cpp` or main procedure.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. No compiler warnings for GCC or Clang with optimization enabled.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Does not call `flute::readLUT` (called once by `openroad`).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Tcl command(s) documented in top level `README.md` in flow order.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Command line tool documentation in tool README.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Conforms to Tcl command naming standards (no camel case).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Does not read configuration files. Use command arguments or support commands.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `.clang-format` at tool root directory to aid foreign programmers.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. No `jenkins/`, `Jenkinsfile`, `Dockerfile` in tool directory.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `regression` script named `test/regression` with no arguments that runs tests. Not", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "runs tests. Not `tests/regression-tcl.sh`, not `test/run_tests.py` etc.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `regression` script should run independent of current directory. For example,", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For example, `../test/regression` should work.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `regression` should only print test results or summary, not belch 1000s of lines of output.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Test scripts use OpenROAD tcl commands (not `itcl`, not internal accessors).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. `regression` script should only write files in a directory that is in the tool's `.gitignore` so", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`.gitignore` so the hierarchy does not have modified files in it as a result or running the", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "or running the regressions.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Regressions report no memory errors with `valgrind` (stretch goal).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Regressions report no memory leaks with `valgrind` (difficult).", "metadata": {"Header 1": "Developer Guide", "Header 2": "Tool Checklist", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD uses both `clang-tidy` and `clang-format` to perform automatic linting and formatting", "metadata": {"Header 1": "Developer Guide", "Header 2": "Code Linting and Formatting", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and formatting whenever a pull request is submitted. To run these locally, please first setup Clang", "metadata": {"Header 1": "Developer Guide", "Header 2": "Code Linting and Formatting", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "first setup Clang Tooling using this [guide]( Thereafter, you may run these commands:", "metadata": {"Header 1": "Developer Guide", "Header 2": "Code Linting and Formatting", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Internally, the code should use `int` for all database units and `int64_t`", "metadata": {"Header 1": "Developer Guide", "Header 2": "Guidelines", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for all area calculations. Refer to this [link](DatabaseMath.md) for a more", "metadata": {"Header 1": "Developer Guide", "Header 2": "Guidelines", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "detailed writeup on the reasons why this approach is preferred. The only", "metadata": {"Header 1": "Developer Guide", "Header 2": "Guidelines", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "place that the database distance units should appear in any program", "metadata": {"Header 1": "Developer Guide", "Header 2": "Guidelines", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "should be in the user interface, as microns are easier for humans than DBUs.", "metadata": {"Header 1": "Developer Guide", "Header 2": "Guidelines", "source": "docs/contrib/DeveloperGuide.md", "file_path": "docs/contrib/DeveloperGuide.md", "file_name": "DeveloperGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Thank you for taking the time to read this document and to contribute.", "metadata": {"Header 1": "Getting Involved", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The OpenROAD project will not reach all of its objectives without help!", "metadata": {"Header 1": "Getting Involved", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Possible ways to contribute to the OpenROAD application:  \n- Tool improvements\n- New tools", "metadata": {"Header 1": "Getting Involved", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- New tools\n- Improvements to documentation, including this document", "metadata": {"Header 1": "Getting Involved", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Star our project and repos so we can see the number of people\nwho are interested", "metadata": {"Header 1": "Getting Involved", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "As much as possible, all contributions should be licensed using the BSD3", "metadata": {"Header 1": "Getting Involved", "Header 2": "Licensing Contributions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "license. You can propose another license if you must, but contributions", "metadata": {"Header 1": "Getting Involved", "Header 2": "Licensing Contributions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "made with BSD3 fit best with the spirit of OpenROAD's permissive open-source", "metadata": {"Header 1": "Getting Involved", "Header 2": "Licensing Contributions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "philosophy. We do have exceptions in the project, but over time we hope", "metadata": {"Header 1": "Getting Involved", "Header 2": "Licensing Contributions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that all contributions will be BSD3, or some other permissive license such as MIT\nor Apache2.0.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Licensing Contributions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "We follow the [Google C++ style guide](", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you find code in our project that does *not* follow this guide, then within each file that", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "you edit, follow the style in that file.  \nPlease pay careful attention to the", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[tool checklist](DeveloperGuide.md#tool-checklist) for all code. If you want", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to add or improve functionality in OpenROAD, please start with the\ntop-level [app]( repo. You", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "can see in the `src` directory that submodules exist pointing to tested", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "versions of the other relevant repos in the project. Please look at the", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool workflow in the developer guide [document](DeveloperGuide.md)", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to work with the app and its submodule repos in an efficient way.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Please run clang-format on all the C++ source files that you change, before", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "committing. In the root directory of the OpenROAD repository there is the", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file `.clang-format` that defines all coding formatting rules.  \nPlease pay attention to the", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[test directory](\nand be sure to add tests for any code changes that you make, using open-source", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "PDK and design information. We provide the `nangate45` PDK in", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the OpenROAD-flow-scripts repo to help with this. Pull requests with", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "code changes are unlikely to be accepted without accompanying test\ncases. There are many", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[examples](\ntests. Each repo has a test directory as well with tests you should run", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and add to if you modify something in one of the submodules.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For changes that claim to improve QoR or PPA, please run many tests and", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "ensure that the improvement is not design-specific. There are designs in\nthe", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the\n[OpenROAD-flow-scripts](", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "repo which can be used unless the improvement is technology-specific.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not add runtime or build dependencies without serious thought. For a", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "project like OpenROAD with many application subcomponents, the software", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "architecture can quickly get out of control. Changes with lots of new", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "dependencies which are not necessary are less likely to be integrated.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you want to add Tcl code to define a new tool command, look at [pdngen](", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "as an example of how to do so. Take a look at the\n[CMake file](", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[CMake file](\nwhich automatically sources the Tcl code and the\n[Tcl file](\nitself.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "itself.  \nTo accept contributions, we require each commit to be made with a DCO (Developer", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Certificate of Origin) attached.", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When you commit you add the `-s` flag to your commit. For example:", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This will append a statement to your commit comment that attests to the DCO. GitHub", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "has built in the `-s` option to its command line since use of this is so", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "pervasive. The promise is very basic, certifying that you know that you", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "have the right to commit the code. Please read the  [full statement\nhere](", "metadata": {"Header 1": "Getting Involved", "Header 2": "Contributing Scripts and Code", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Please refer to our [FAQs](../user/FAQS.md).", "metadata": {"Header 1": "Getting Involved", "Header 2": "Questions", "source": "docs/contrib/GettingInvolved.md", "file_path": "docs/contrib/GettingInvolved.md", "file_name": "GettingInvolved.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This tutorial serves as a quickstart to Git and contributing to our repository. If you have not", "metadata": {"Header 1": "Git Quickstart", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you have not already set up OpenROAD, please follow the instructions [here](user/Build.md).", "metadata": {"Header 1": "Git Quickstart", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You will need your own fork to work on the code. Go to the `OpenROAD` project", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Forking", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[page]( and hit the `Fork` button. You will\nwant to clone your fork to your machine:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Forking", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This creates the directory `OpenROAD` and connects your repository to", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Forking", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the upstream (master project) *OpenROAD* repository.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Forking", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You want your master branch to reflect only production-ready code, so create a", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "feature branch for making your changes. For example:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This changes your working directory to the shiny-new-feature branch.  Keep any", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "changes in this branch specific to one bug or feature so it is clear", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "what the branch brings to OpenROAD. You can have many shiny-new-features", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and switch in between them using the git checkout command.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When creating this branch, make sure your master branch is up to date with", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the latest upstream master version. To update your local master branch, you\ncan do:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "can do:  \nWhen you want to update the feature branch with changes in master after", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "you created the branch, check the section on\n[updating a PR](#updating-your-pull-request).", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Creating a branch", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Keep style fixes to a separate commit to make your pull request more readable. Once you've made", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Once you've made changes, you can see them by typing:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you have created a new file, it is not being tracked by git. Add it by typing:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Doing `git status` again should give something like:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Finally, commit your changes to your local repository with an explanatory commit", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "message. Do note the `-s` option is needed for developer signoff.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Committing your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When you want your changes to appear publicly on your GitHub page, push your", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "forked feature branch's commits:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Here `origin` is the default name given to your remote repository on GitHub.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can see the remote repositories:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you added the upstream repository as described above you will see something\nlike:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "like:  \nNow your code is on GitHub, but it is not yet a part of the OpenROAD project. For that to", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "happen, a pull request needs to be submitted on GitHub.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Pushing your changes", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When you're ready to ask for a code review, file a pull request. Before you do, once", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "again make sure that you have followed all the guidelines outlined in the [Developer's", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the [Developer's Guide](./DeveloperGuide.md)", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "regarding code style, tests, performance tests, and documentation. You should also", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "double check your branch changes against the branch it was based on:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Navigate to your repository on GitHub --\n1. Click on `Branches`", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Click on the `Compare` button for your feature branch", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Select the `base` and `compare` branches, if necessary. This will be `master` and", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`shiny-new-feature`, respectively.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Review your code", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If everything looks good, you are ready to make a pull request. A pull request is how", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "code from a local repository becomes available to the GitHub community and can be looked", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "at and eventually merged into the master version. This pull request and its associated", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "changes will eventually be committed to the master branch and available in the next", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "release. To submit a pull request:  \n1. Navigate to your repository on GitHub", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Click on the ``Compare & pull request`` button", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. You can then click on ``Commits`` and ``Files Changed`` to make sure everything looks", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "okay one last time\n1. Write a description of your changes in the ``Preview Discussion`` tab", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Click ``Send Pull Request``.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This request then goes to the repository maintainers, and they will review\nthe code.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Submitting the pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Based on the review you get on your pull request, you will probably need to make", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "some changes to the code. In that case, you can make them in your branch,", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "add a new commit to that branch, push it to GitHub, and the pull request will be", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "automatically updated.  Pushing them to GitHub again is done by:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This will automatically update your pull request with the latest code and restart the", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[Continuous Integration](./CI.md) tests.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Another reason you might need to update your pull request is to solve conflicts", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with changes that have been merged into the master branch since you opened your\npull request.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "pull request.  \nTo do this, you need to `merge upstream master` in your branch:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If there are no conflicts (or they could be fixed automatically), a file with a", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "default commit message will open, and you can simply save and quit this file.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If there are merge conflicts, you need to solve those conflicts. See\nthis [article](", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this [article](\nfor an explanation on how to do this.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Once the conflicts are merged and the files where the conflicts were solved are", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "added, you can run ``git commit`` to save those fixes.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you have uncommitted changes at the moment you want to update the branch with", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "master, you will need to ``stash`` them prior to updating.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This will effectively store your changes and they can be reapplied after updating.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "After the feature branch has been updated locally, you can now update your pull", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "request by pushing to the branch on GitHub:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Updating your pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you have made it to the `Review your code` phase, one of the core contributors may", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "take a look. Please note however that a handful of people are responsible for reviewing", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "all of the contributions, which can often lead to bottlenecks.", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To improve the chances of your pull request being reviewed, you should:", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- **Reference an open issue** for non-trivial changes to clarify the PR's purpose", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- **Ensure you have appropriate tests**. These should be the first part of any PR", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- **Keep your pull requests as simple as possible**. Larger PRs take longer to review", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- **Ensure that CI is in a green state**. Reviewers may not even look otherwise", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- **Keep updating your pull request**, either by request or every few days", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Tips for a successful pull request", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This page has been adapted from [pandas Developer Guide](", "metadata": {"Header 1": "Git Quickstart", "Header 2": "Acknowledgements", "source": "docs/contrib/GitGuide.md", "file_path": "docs/contrib/GitGuide.md", "file_name": "GitGuide.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD uses [spdlog]( as part\nof logging infrastructure in order to ensure a clear, consistent", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "messaging and complete messaging interface. A wrapper formats the prefix", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the recommended messaging style and limit. A message format is as\nfollows:  \nFor example,", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For example,  \nAll output from OpenROAD tools should be directed through the logging", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "API to ensure that redirection, file logging and execution control flow", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "are handled consistently. This also includes messages from any third-party", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool. Use the 'ord' message ID for third-party tools.", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The logging infrastructure also supports generating a", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[JSON]( file containing design metrics (e.g., area or", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "slack). This output is directed to a user-specified file. The OpenROAD", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "application has a `-metrics` command line argument to specify the file.", "metadata": {"Header 1": "Using the Logging Infrastructure", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD supports multiple levels of severity for message outputs:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Handling Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "critical, error, warning, information and debug. These are supported by", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Handling Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "automatic calls to the logger which will then prefix the appropriate\nseverity type to the message.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Handling Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In C++20 the logger messages are checked during compile time which introduces", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "restrictions around rutime format strings. See [docs](", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD uses `spdlog` which uses `fmt_lib` under the hood. Below is an example of", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "what is no longer allowed.  \nIn order to make use of runtime format strings, we have introduced a", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`FMT_RUNTIME` macro in Logger.h. You should use this macro any time you", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "pass a dynamic string as the format string", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "C++20 Requirements", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In addition to the proper use of message types, follow the guidelines", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "below to compose messages for clarity, consistency and other guidelines:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Start with a capital letter and end with a period, besides well-known", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "exceptions. Use capital letters for file formats and tool proper names, e.g.,", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "LEF, DEF, SPICE, FLUTE.  \nAfter the first word's capitalization, do not use capital letters", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(aside from obvious exceptions, such as RSMT, hCut, etc.).", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not use exclamations. Severity must be communicated by message", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "severity and clear implied or explicit action.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Avoid long, verbose messages. Use commas to list and separate clauses in\nmessages.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "messages.  \nSpellcheck all messages using American English spellings.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use ellipsis `...` only to indicate a pause, as when some tool is\nrunning or being initialized.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Grammar", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use single-word versions when well-accepted / well-understood by users\nand developers. Examples:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Abbreviations and Shortcuts", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`stdcell, cutline, wirelength, flipchip, padring, bondpad, wirebond, libcell, viarule`.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Abbreviations and Shortcuts", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do not abbreviate or truncate English words; expand for the sake of clarity.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Abbreviations and Shortcuts", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use acceptable, well-understood abbreviations for brevity. Examples:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Abbreviations and Shortcuts", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`db, tech, lib, inst, term, params, etc`.  \nAvoid contractions of action words:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Abbreviations and Shortcuts", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Messages should communicate a clear, implied or explicit action", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Actionability", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that is necessary for flow continuation or improved quality of results.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Actionability", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Messages must be clear and complete, so as to communicate", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "necessary and sufficient information and actions. Elaborate specific variables,", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "options, and/or parameters to avoid any ambiguity.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Specify objects clearly in the local context:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Make any assumptions or use of default values explicit:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Use simple language, and avoid repetitions:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Clarity", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD supports the following levels of severity through the logger:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "report, debug, information, warning, error and critical.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Report messages are output by the tool in the form of a report to the user. Examples", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Report", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "include timing paths or power analysis results.  \nExample report message:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Report", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Debug messages are only of use to tool developers and not to end users.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Debug", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "These messages are not shown unless explicitly enabled.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Debug", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Information messages may be used to report metrics, quality of", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "results, or program status to the user. Any message which indicates", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "runtime problems, such as potential faulty input or other internal", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "program issues, should be issued at a higher status level.  \nExample information messages:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Warnings should be used to indicate atypical runtime conditions that", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Warning", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "may affect quality, but not correctness, of the output. Any conditions", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Warning", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that affect correctness should be issued at a higher status level.  \nExample warning messages:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Warning", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Error messages should be used to indicate correctness problems.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Error", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Problems with command arguments are a good example of where error messages\nare appropriate. Errors", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Error", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "exit the current command by throwing an exception that is converted to", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Error", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "an error in Tcl. Errors that occur while reading a command file stop", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Error", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "execution of the script commands.  \nExample error messages:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Error", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Critical messages should be used to indicate correctness problems", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Critical", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that the program is not able to work around or ignore, and that require", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Critical", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "immediate exiting of the program (abort).  \nExample critical messages:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Messaging Guidelines", "Header 3": "Message Types", "Header 4": "Critical", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Each status message requires:  \n- The three letter tool ID\n- The message ID\n- The message string", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Optionally, additional arguments to fill in placeholders in the\nmessage string", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "message string  \nReporting is simply printing and does not require a tool or message ID.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The tool ID comes from a fixed enumeration of all the tools in the", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "system. This enumeration is in `Logger.h`. New abbreviations should be", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "added after discussion with the OpenROAD system architects. The abbreviation", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "matches the C++ namespace for the tool.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Message IDs are integers. They are expected to be unique for each tool.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This has the benefit that a message can be mapped to the source code", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "unambiguously even if the text is not unique. Maintaining this invariant", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is the tool owner's responsibility. To ensure that the IDs are unique,", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "each tool should maintain a file named 'messages.txt' in the top-level", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool directory, listing the message IDs along with the format string.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When code that uses a message ID is removed, the ID should be retired by", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "removing it from 'messages.txt'. See the utility", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`etc/find_messages.py` to scan a tool directory and write a\n`messages.txt` file.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Spdlog comes with the `fmt` library which supports message formatting in a", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "python or [C++20 like style](", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The message string should not include the tool ID or message ID which", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "will automatically be prepended. A trailing newline will automatically", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be added, and hence messages should not end with one. Messages should be written", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "as complete sentences and end in a period. Multi-line messages may\ncontain embedded new lines.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Some examples:  \nTcl functions for reporting messages are defined in the OpenROAD swig", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file `OpenRoad.i`. The message is simply a Tcl string (no C++20\nformatting).", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "formatting).  \n`utl::report` should be used instead of 'puts' so that all output is\nlogged.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "logged.  \nCalls to the Tcl functions `utl::warn` and `utl::error` with a single", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "message argument report with tool `ID UKN` and message `ID 0000`.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tools use `#include utl/Logger.h` that defines the logger API. The Logger", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instance is owned by the OpenROAD instance. Each tool should retrieve", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the logger instance in the tool init function called after the tool make", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "function by the OpenROAD application.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Every tool swig file must include src/Exception.i so that errors thrown", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by `utl::error` are caught at the Tcl command level. Use the following", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "swig command before `%inline`.  \nThe logger functions are shown below.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The corresponding Tcl functions are shown below.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Although there is a `utl::critical` function, it is really difficult to", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "imagine any circumstances that would justify aborting execution of the", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "application in a tcl function.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Debug messages have a different programming model. As they are most", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "often *not* issued the concern is to avoid slowing down normal", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "execution. For this reason such messages are issued by using the", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "debugPrint macro. This macro will avoid evaluating its arguments if they", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "are not going to be printed. The API is:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `debug()` method of the Logger class should not be called directly.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "No message id is used as these messages are not intended for end users.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The level is printed as the message id in the output.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The argument types are as for the info/warn/error/critical messages.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The one additional argument is group which is a `const char*`. Its", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "purpose is to allow the enabling of subsets of messages within one\ntool.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tool.  \nDebug messages are enabled with the tcl command:\n`set_debug_level <tool> <group> <level>`", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Coding", "Header 3": "Debug Messages", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The metrics logging uses a more restricted API since JSON only supports", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Metrics", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "specific types. There are a set of overloaded methods of the form:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Metrics", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "where `<type>` can be `int, double, string, or bool`. This will result\nin the generated JSON:", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Metrics", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "String values will be enclosed in double-quotes automatically.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Metrics", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The error functions in `include/openroad/Error.hh` should no longer be", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "included or used. Use the corresponding logger functions.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "All uses of the tcl functions ord::error and ord::warn should be updated", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "call the `utl::error/warn` with a tool ID and message ID. For", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "compatibility these are defaulted to `UKN` and `0000` until they are\nupdated.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "updated.  \nRegression tests should not have any `UKN-0000` messages in their ok", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "files. A simple grep should indicate that you still have pending calls", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to pre-logger error/warn functions.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `cmake` file for the tool must also be updated to include spdlog in", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the link libraries so it can find the header files if they are not in", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the normal system directories.  \n:::{tip}", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": ":::{tip}\nAt UCSD, dfm.ucsd.edu is an example of this problem; it has an ancient version of", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "spdlog in '/usr/include/spdlog'. Use `module` to install", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "spdlog 1.8.1 on dfm.ucsd.edu and check your build there.\n:::", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Converting to Logger", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "As tool developers, we can also choose to include useful information to the end user -", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be it in the form on debugging tips, or solutions to fix the errors/warnings. We compile", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a list of such errors in this [table](../user/MessagesFinal.md). The good thing about", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this page is the ability to encode rich formatting using Markdown, enabling you", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to convey more information than what can be said from the limited messages in code.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To format the information, refer to this [sample GRT information", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "GRT information file](../main/src/grt/doc/messages/0118.md).", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In addition, make sure you create the corresponding `docs/messages` folder under the `tool` folder,", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "before creating your Markdown file with the corresponding `NUM`.", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A full list of tool namespaces can be found [here](DeveloperGuide.md#tool-flow-namespace).", "metadata": {"Header 1": "Using the Logging Infrastructure", "Header 2": "Useful Information", "Header 3": "OpenROAD Tool List", "source": "docs/contrib/Logger.md", "file_path": "docs/contrib/Logger.md", "file_name": "Logger.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Brief description.\nThis tool is awesome and does a lot of things.", "metadata": {"Header 1": "New Tool", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(Optional): provide reports, graphics, figures and other resources to better", "metadata": {"Header 1": "New Tool", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "explain how the tool works.", "metadata": {"Header 1": "New Tool", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out\n[GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "New Tool", "Header 2": "FAQs", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- List papers, link to tools, etc", "metadata": {"Header 1": "New Tool", "Header 2": "External references (Optional)", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "New Tool", "Header 2": "License", "source": "docs/misc/NewToolDocExample.md", "file_path": "docs/misc/NewToolDocExample.md", "file_name": "NewToolDocExample.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Flow tutorial can be accessed from OpenROAD Flow Scripts documentation [here](", "metadata": {"Header 1": "Tutorials", "Header 2": "OpenROAD Flow Scripts Tutorial", "source": "docs/tutorials/index.md", "file_path": "docs/tutorials/index.md", "file_name": "index.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The first step, independent of the build method, is to download the repository:", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD git submodules (cloned by the `--recursive` flag) are located in `src/`.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The default build type is RELEASE to compile optimized code.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The resulting executable is in `build/src/openroad`.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Optional CMake variables passed as `-D<var>=<value>` arguments to CMake are show below.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Argument               | Value                     |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|------------------------|---------------------------|", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `CMAKE_BUILD_TYPE`     | DEBUG, RELEASE            |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `CMAKE_CXX_FLAGS`      | Additional compiler flags |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `TCL_LIBRARY`          | Path to Tcl library       |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `TCL_HEADER`           | Path to `tcl.h`           |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `ZLIB_ROOT`            | Path to `zlib`            |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `CMAKE_INSTALL_PREFIX` | Path to install binary    |", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> **Note:** There is a `openroad_build.log` file that is generated", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with every build in the build directory. In case of filing issues,", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "it can be uploaded in the \"Relevant log output\" section of OpenROAD\n[issue forms](", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Build", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You may follow our helper script to install dependencies as follows:  \n> **WARNING**\n>", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> **WARNING**\n>\n> `etc/DependencyInstaller.sh` defaults to installing system", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> packages and requires sudo access. These packages can affect", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> your environment. We recommend users install dependencies\n> locally using [setup.sh](", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> from OpenROAD-flow-scripts.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The default install directory is `/usr/local`.\nTo install in a different directory with CMake use:", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build Manually", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Alternatively, you can use the `DESTDIR` variable with make.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build Manually", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The default install directory is `/usr/local`.\nTo install in a different directory use:", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build using support script", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "By default, OpenROAD is built with link time optimizations enabled.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "LTO Options", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This adds about 1 minute to compile times and improves the runtime", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "LTO Options", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by about 11%. If you would like to disable LTO pass", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "LTO Options", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`-DLINK_TIME_OPTIMIZATION=OFF` when generating a build.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "LTO Options", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To enable building with Address Sanitizer, use the argument `-DASAN=ON`.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Address Sanitizer", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Setting the `ASAN` variable to `ON` adds necessary compile and link options", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Address Sanitizer", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for using Address Sanitizer.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Address Sanitizer", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "> **Note:** Address Sanitizer adds instrumentation for detecting memory errors.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Address Sanitizer", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": ">  Enabling this option will cause OpenROAD to run slower and consume more RAM.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Address Sanitizer", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Courtesy of [Precision Innovations]( there are pre-built binaries", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Prebuilt Binaries", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of OpenROAD with self-contained dependencies released on a regular basis.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Prebuilt Binaries", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Refer to this [link]( here.", "metadata": {"Header 1": "Build OpenROAD", "Header 2": "Install dependencies", "Header 3": "Build with Prebuilt Binaries", "source": "docs/user/Build.md", "file_path": "docs/user/Build.md", "file_name": "Build.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you cannot find your question/answer here, please file a GitHub issue to", "metadata": {"Header 1": "FAQs", "source": "docs/user/FAQS.md", "file_path": "docs/user/FAQS.md", "file_name": "FAQS.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the appropriate repository or start a discussion.  \n-   Issues and bugs:\n-   OpenROAD: <", "metadata": {"Header 1": "FAQs", "source": "docs/user/FAQS.md", "file_path": "docs/user/FAQS.md", "file_name": "FAQS.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   OpenROAD: <\n-   Discussions:\n-   OpenROAD: <", "metadata": {"Header 1": "FAQs", "source": "docs/user/FAQS.md", "file_path": "docs/user/FAQS.md", "file_name": "FAQS.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Thank you for your willingness to contribute. Please see the", "metadata": {"Header 1": "FAQs", "Header 2": "How can I contribute?", "source": "docs/user/FAQS.md", "file_path": "docs/user/FAQS.md", "file_name": "FAQS.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[Getting Involved](../contrib/GettingInvolved) guide.", "metadata": {"Header 1": "FAQs", "Header 2": "How can I contribute?", "source": "docs/user/FAQS.md", "file_path": "docs/user/FAQS.md", "file_name": "FAQS.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This tool checks antenna violations and generates a report to indicate", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "violated nets. See LEF/DEF 5.8 Language Reference, Appendix C,", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"Calculating and Fixing Process Antenna Violations\" (p.389)", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for a [description]( of antenna violations.", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This is an example of the detailed and simple reports of the antenna checker:", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/ant_report_print.png\" width=500px> |  \nAbbreviations Index:", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `PAR`: Partial Area Ratio\n-   `CAR`: Cumulative Area Ratio\n-   `Area`: Gate Area", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `S. Area`: Side Diffusion Area\n-   `C. Area`: Cumulative Gate Area", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `C. S. Area`: Cumulative Side (Diffusion) Area", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Antenna violations can be repaired after global routing with the `repair_design` command.", "metadata": {"Header 1": "Antenna Rule Checker", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Regression tests", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Regression tests", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Regression tests", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "FAQs", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/example_ant.png\" width=400px> | <img src=\"./doc/images/step1.png\"", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "width=400px> |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|:--:|:--:|", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Antenna Checker Algorithm: WireGraph Example | Step 1: (a) Start from the root node (ITerm) using", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "node (ITerm) using upper Via to find a node for a new wire. (b) Save the ITerm area for cumulative", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "area for cumulative gate/diffusion area. |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/step2.png\" width=400px> | <img src=\"./doc/images/step3.png\" width=400px> |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Step 2: From the node of the wire, find all the nodes in the wire through segment wires and find", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "wires and find the \"root\" node of this wire. | Step 3: (a) From the \"root\" node of the wire, along", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the wire, along the outgoing segment edge that goes to other nodes belonging to this wire,", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to this wire, calculate the area of this wire. (b) Then, find all the ITerms below these nodes,", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "below these nodes, except for the root node (directly use an ITerm or lower Vias to find ITerms for", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to find ITerms for lower metals). (c) Sum up the areas of all the ITerms found with the cumulative", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with the cumulative areas and calculate the PAR of this wire. (d) Add the PAR value and the wire", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "value and the wire info (layer, Index) into the PAR table. Add the new area to the cumulative", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to the cumulative areas. |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/step4.png\" width=400px> | <img src=\"./doc/images/step5.png\" width=400px> |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Step 4: Find all the upper Vias on this wire (for all the nodes on this wire), and go to the", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and go to the higher-level metal. | Step 5: Repeat Steps 2 and 3 for new-found upper-level wires. |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/step6.png\" width=400px> | <img src=\"./doc/images/step7.png\" width=400px> |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Step 6: Repeat Steps 4 and 5 until we reach a wire that cannot have upper Vias for its nodes", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Vias for its nodes (highest-level metal). | Step 7: Pick up another ITerm as a root node and repeat", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "node and repeat Steps 1 to 6, skipping the wires already in the PAR table. Repeat this for all the", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this for all the ITerms to get a whole PAR table. |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/images/step8.png\" width=400px> |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Step 8: (a) Pick up a gate ITerm and a node of a wire (e.g., M4,1). Find possible paths that", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "possible paths that connect them, look up the PAR value of the wires along these paths, and add", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "paths, and add them up to get the CAR of the (gate, wire) pair. (b) Compare to the AntennaRule to", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the AntennaRule to see if the CAR violates the rules. (c) Check this for all (gate, wire) pairs. |", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "Algorithm", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Antenna Rule Checker", "Header 2": "License", "source": "src/ant/README.md", "file_path": "src/ant/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The clock tree synthesis module in OpenROAD (`cts`) is based on TritonCTS", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2.0. It is available from the `clock_tree_synthesis` command. TritonCTS 2.0", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "performs on-the-fly characterization. Thus, there is no need to generate", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "characterization data. The on-the-fly characterization feature can be optionally", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "controlled by parameters specified by the `configure_cts_characterization`", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "command. Use `set_wire_rc` command to set the clock routing layer.", "metadata": {"Header 1": "Clock Tree Synthesis", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "Regression tests", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "Regression tests", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "Regression tests", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out\n[GitHub discussion]( about this tool.", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "FAQs", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1.   [LEMON]( - **L**ibrary for\n**E**fficient **M**odeling and **O**ptimization in **N**etworks", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "References", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1.  Kahng, A. B., Li, J., & Wang, L. (2016, November). Improved flop tray-based design", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "References", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tray-based design implementation for power reduction. In 2016 IEEE/ACM International Conference on", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "References", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Conference on Computer-Aided Design (ICCAD) (pp. 1-8). IEEE. [(.pdf)](", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "References", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Clock Tree Synthesis", "Header 2": "License", "source": "src/cts/README.md", "file_path": "src/cts/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This tool is an implementation of Design For Testing. New nets and logic are added to allow IC", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "added to allow IC designs to", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be tested for errors in manufacturing.   Physical imperfections can cause hard failures and", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "hard failures and variability can cause timing errors.", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A simple DFT insertion consist of the following parts:", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* A scan_in pin where the test patterns are shifted in.", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* A scan_out pin where the test patterns are read from.", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Scan cells that replace flops with registers that allow for testing.", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* One or more scan chains (shift registers created from your scan cells).", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* A scan_enable pin to allow your design to enter and leave the test mode.", "metadata": {"Header 1": "DFT: Design for Testing", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `-max_length`: The maxinum number of bits that can be in each scan chain.", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `-clock_mixing`: How architect will mix the scan flops based on the clock driver.", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `no_mix`: Creates scan chains with only one type of clock and edge. This", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "may create unbalanced chains.", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `clock_mix`: Craetes scan chains mixing clocks and edges. Falling edge", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "flops are going to be stitched before rising edge.", "metadata": {"Header 1": "TCL Commands", "Header 2": "set_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Prints the current DFT configuration to be used by `preview_dft` and\n`insert_dft`.", "metadata": {"Header 1": "TCL Commands", "Header 2": "report_dft_config", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Prints a preview of the scan chains that will be stitched by `insert_dft`. Use", "metadata": {"Header 1": "TCL Commands", "Header 2": "preview_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this command to iterate and try different DFT configurations. This command do", "metadata": {"Header 1": "TCL Commands", "Header 2": "preview_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "not perform any modification to the design.", "metadata": {"Header 1": "TCL Commands", "Header 2": "preview_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `-verbose`: Shows more information about each one of the scan chains that will\nbe created.", "metadata": {"Header 1": "TCL Commands", "Header 2": "preview_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Implements the scan chains into the design by performing the following actions:  \n1. Scan Replace.", "metadata": {"Header 1": "TCL Commands", "Header 2": "insert_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Scan Replace.\n2. Scan Architect.\n3. Scan Stitch.", "metadata": {"Header 1": "TCL Commands", "Header 2": "insert_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. Scan Stitch.  \nThe end result will be a design with scan flops connected to form the scan", "metadata": {"Header 1": "TCL Commands", "Header 2": "insert_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "chains.", "metadata": {"Header 1": "TCL Commands", "Header 2": "insert_dft", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This example will create scan chains with a max length of 10 bits mixing all the", "metadata": {"Header 1": "Example", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "scan flops in the scan chains.", "metadata": {"Header 1": "Example", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* There are no optimizations for the scan chains. This is a WIP.", "metadata": {"Header 1": "Limitations", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* There is no way to specify existing scan ports to be used by scan insertion.", "metadata": {"Header 1": "Limitations", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* There is currently no way to define a user defined scan path.", "metadata": {"Header 1": "Limitations", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* We can only work with one bit cells.", "metadata": {"Header 1": "Limitations", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Limitations", "Header 2": "License", "source": "src/dft/README.md", "file_path": "src/dft/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The detailed placement module in OpenROAD (`dpl`) is based on OpenDP, or", "metadata": {"Header 1": "Detailed Placement", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Open-Source Detailed Placement Engine. Its key features are:  \n-   Fence region.", "metadata": {"Header 1": "Detailed Placement", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Fence region.\n-   Fragmented ROWs.", "metadata": {"Header 1": "Detailed Placement", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Examples scripts demonstrating how to run `dpl` on a sample design of `aes` as follows:", "metadata": {"Header 1": "Detailed Placement", "Header 2": "Example scripts", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. Refer to this", "metadata": {"Header 1": "Detailed Placement", "Header 2": "Regression tests", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Refer to this [section](../../README.md#regression-tests) for more information.", "metadata": {"Header 1": "Detailed Placement", "Header 2": "Regression tests", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Detailed Placement", "Header 2": "Regression tests", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Detailed Placement", "Header 2": "FAQs", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Do, S., Woo, M., & Kang, S. (2019, May). Fence-region-aware mixed-height standard cell", "metadata": {"Header 1": "Detailed Placement", "Header 2": "References", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "standard cell legalization. In Proceedings of the 2019 on Great Lakes Symposium on VLSI (pp.", "metadata": {"Header 1": "Detailed Placement", "Header 2": "References", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "on VLSI (pp. 259-262). [(.pdf)](", "metadata": {"Header 1": "Detailed Placement", "Header 2": "References", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Detailed Placement", "Header 2": "License", "source": "src/dpl/README.md", "file_path": "src/dpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The Detailed Routing (`drt`) module in OpenROAD is based on the open-source", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "detailed router, TritonRoute. TritonRoute consists of several main", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "building blocks, including pin access analysis, track assignment,", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "initial detailed routing,  search and repair, and a DRC engine.\nThe initial development of the", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[router](\nis inspired by the [ISPD-2018 initial detailed routing", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "contest](  However, the current framework", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "differs and is built from scratch, aiming for an industrial-oriented scalable\nand flexible flow.", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "TritonRoute provides industry-standard LEF/DEF interface with\nsupport of [ISPD-2018]( and", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[ISPD-2019]( contest-compatible route\nguide format.", "metadata": {"Header 1": "Detailed Routing", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example script demonstrating how to run TritonRoute on a sample design of `gcd`", "metadata": {"Header 1": "Detailed Routing", "Header 2": "Example scripts", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the Nangate45 technology node.", "metadata": {"Header 1": "Detailed Routing", "Header 2": "Example scripts", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Detailed Routing", "Header 2": "Regression tests", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Detailed Routing", "Header 2": "Regression tests", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Detailed Routing", "Header 2": "Regression tests", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Detailed Routing", "Header 2": "FAQs", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Please cite the following paper(s) for publication:", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1.   A. B. Kahng, L. Wang and B. Xu, \"TritonRoute: The Open Source Detailed", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Router\", IEEE Transactions on Computer-Aided Design of Integrated Circuits", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and Systems (2020), doi:10.1109/TCAD.2020.3003234. [(.pdf)](", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1.   A. B. Kahng, L. Wang and B. Xu, \"The Tao of PAO: Anatomy of a Pin Access", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Oracle for Detailed Routing\", Proc. ACM/IEEE Design Automation Conf., 2020,\npp. 1-6. [(.pdf)](", "metadata": {"Header 1": "Detailed Routing", "Header 2": "References", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Detailed Routing", "Header 2": "License", "source": "src/drt/README.md", "file_path": "src/drt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This module inserts floating metal fill shapes to meet metal density", "metadata": {"Header 1": "Metal fill", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "design rules while obeying DRC constraints. It is driven by a `json`\nconfiguration file.", "metadata": {"Header 1": "Metal fill", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The rules `json` file controls fill and you can see an example\n[here](", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[here](  \nThe schema for the `json` is:", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `opc` section is optional depending on your process.", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The width/height lists are effectively parallel arrays of shapes to try", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in left to right order (generally larger to smaller).", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The layer grouping is for convenience. For example in some technologies many", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "layers have similar rules so it is convenient to have a `Mx`, `Cx` group.", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This all started out in `klayout` so there are some obsolete fields that the", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "parser accepts but ignores (e.g., `space_to_outline`).", "metadata": {"Header 1": "Metal fill", "Header 2": "Example scripts", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Metal fill", "Header 2": "Regression tests", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Metal fill", "Header 2": "Regression tests", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Metal fill", "Header 2": "Regression tests", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Metal fill", "Header 2": "FAQs", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Metal fill", "Header 2": "License", "source": "src/fin/README.md", "file_path": "src/fin/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "RePlAce: Advancing Solution Quality and Routability Validation in Global Placement  \nFeatures:", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Features:  \n-   Analytic and nonlinear placement algorithm. Solves", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "electrostatic force equations using Nesterov's method.\n([link](", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "([link](\n-   Verified with various commercial technologies and research enablements using OpenDB", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(7/14/16/28/45/55/65nm).", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Verified deterministic solution generation with various compilers and OS.", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Supports Mixed-size placement mode.", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| <img src=\"./doc/image/adaptec2.inf.gif\" width=350px> | <img src=\"./doc/image/coyote_movie.gif\"", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "width=400px> |", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|:--:|:--:|", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Visualized examples from ISPD 2006 contest; adaptec2.inf |Real-world Design: Coyote (TSMC16 7.5T)", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(TSMC16 7.5T) |", "metadata": {"Header 1": "RePlAce", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This api tries to stay close to the api defined in C++ class `Replace`", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that is located in gpl/include/gpl/Replace.h", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When initializing a design, a sequence of Python commands might look like\nthe following:", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the following:  \nfrom openroad import Design, Tech\ntech = Tech()\ntech.readLef(...)", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "tech.readLef(...)\ndesign = Design(tech)\ndesign.readDef(...)\ngpl = design.getReplace()", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Here is an example of some options / configurations to the global placer.", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(See Replace.h for a complete list)  \ngpl.setInitialPlaceMaxIter(iter)\ngpl.setSkipIoMode(skip_io)", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "gpl.setTimingDrivenMode(timing_driven)\ngpl.setTimingNetWeightMax(weight)", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are some useful Python functions located in the file", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "grt/test/grt_aux.py but these are not considered a part of the (final)\napi and they may change.", "metadata": {"Header 1": "RePlAce", "Header 2": "Using the Python interface to gpl", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "RePlAce", "Header 2": "FAQs", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   C.-K. Cheng, A. B. Kahng, I. Kang and L. Wang, \"RePlAce: Advancing", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Solution Quality and Routability Validation in Global Placement\", IEEE", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Transactions on Computer-Aided Design of Integrated Circuits and Systems,", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "38(9) (2019), pp. 1717-1730.", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   J. Lu, P. Chen, C.-C. Chang, L. Sha, D. J.-H. Huang, C.-C. Teng and", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "C.-K. Cheng, \"ePlace: Electrostatics based Placement using Fast Fourier", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Transform and Nesterov's Method\", ACM TODAES 20(2) (2015), article 17.", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   J. Lu, H. Zhuang, P. Chen, H. Chang, C.-C. Chang, Y.-C. Wong, L. Sha,", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "D. J.-H. Huang, Y. Luo, C.-C. Teng and C.-K. Cheng, \"ePlace-MS:", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Electrostatics based Placement for Mixed-Size Circuits\", IEEE TCAD 34(5)\n(2015), pp. 685-698.", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   A. B. Kahng, J. Li and L. Wang,", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"Improved Flop Tray-Based Design Implementation for Power Reduction\",", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "IEEE/ACM ICCAD, 2016, pp. 20:1-20:8.  \n-   The timing-driven mode has been implemented by", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Mingyu Woo (only available in [legacy repo in standalone\nbranch](", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "branch](\n-   The routability-driven mode has been implemented by Mingyu Woo.", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Timing-driven mode re-implementation is ongoing with the current\nclean-code structure.", "metadata": {"Header 1": "RePlAce", "Header 2": "External references", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "RePlAce", "Header 2": "License", "source": "src/gpl/README.md", "file_path": "src/gpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The global routing module in OpenROAD (`grt`) is based on FastRoute, an", "metadata": {"Header 1": "Global Routing", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "open-source global router originally derived from Iowa State University's\nFastRoute4.1 algorithm.", "metadata": {"Header 1": "Global Routing", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Examples scripts demonstrating how to run FastRoute on a sample design of `gcd` as follows:", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Switch Name | Description |\n| ----- | ----- |\n| `file_name` | Path to global routing guide. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Read Global Routing Guides", "Header 4": "Options", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you are a developer, you might find these useful. More details can be found in the [source", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the [source file](./src/GlobalRouter.cpp) or the [swig file](./src/GlobalRouter.i).", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Function Name | Description |\n| ----- | ----- |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `check_routing_layer` | Check if the layer is within the min/max routing layer specified. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `parse_layer_name` | Get routing layer number from layer name |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `parse_layer_range` | Parses a range from `layer_range` argument of format (%s-%s). `cmd`", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(%s-%s). `cmd` argument is not used. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `check_region` | Checks the defined region if its within the die area. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `define_layer_range` | Provide a Tcl list of layers and automatically generate the min and max", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the min and max layers for signal routing. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `define_clock_layer_range| Provide a Tcl list of layers and automatically generate the min and", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the min and max layers for clock routing. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `have_detailed_route` | Checks if block has detailed route already. |", "metadata": {"Header 1": "Global Routing", "Header 2": "Example scripts", "Header 3": "Useful developer functions", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Global Routing", "Header 2": "Regression tests", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Global Routing", "Header 2": "Regression tests", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Global Routing", "Header 2": "Regression tests", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `Python` API tries to stay close to the API defined in the `C++` class", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`GlobalRouter` that is located [here](./include/grt/GlobalRouter.h)", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When initializing a design, a sequence of `Python` commands might look like\nthe following:", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the following:  \nHere are some options to the `global_route`", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "command. (See `GlobalRouter.h` for a complete list)", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and when ready to actually do the global route:", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "If you have set `save_guides` to True, you can then save the guides in `file_name` with:", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find the index of a named layer with  \nor, if you only have the `Python` design object", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Be aware that much of the error checking is done in `Tcl`, so that with", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the current `C++` / `Python` API, that might be an issue to deal", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with. There are also some useful `Python` functions located in the `grt_aux.py`", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the `grt_aux.py` [file](./test/grt_aux.py)", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "but these are not considered a part of the *final* API and may be subject to change.", "metadata": {"Header 1": "Global Routing", "Header 2": "Using the Python interface to grt", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out\n[GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Global Routing", "Header 2": "FAQs", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Database comes from [OpenDB](", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   [FastRoute 4.1 documentation](src/fastroute/README).  The FastRoute4.1", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "version was received from [Yue Xu](mailto:yuexu@iastate.edu) on June 15, 2019.", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Min Pan, Yue Xu, Yanheng Zhang and Chris Chu. \"FastRoute: An Efficient and", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "High-Quality Global Router. VLSI Design, Article ID 608362, 2012.\"\nAvailable [here](", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Available [here](\n-   C. J. Alpert, T. C. Hu, J. H. Huang, A. B. Kahng and", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "D. Karger, \"Prim-Dijkstra Tradeoffs for Improved Performance-Driven", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Global Routing\", IEEE Transactions on Computer-Aided Design of", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Integrated Circuits and Systems 14(7) (1995), pp. 890-896. Available\n[here](", "metadata": {"Header 1": "Global Routing", "Header 2": "References", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Global Routing", "Header 2": "License", "source": "src/grt/README.md", "file_path": "src/grt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The graphical user interface can be access by launching OpenROAD with ``-gui`` or by opening it from", "metadata": {"Header 1": "Graphical User Interface", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by opening it from the command-line with ``gui::show``.", "metadata": {"Header 1": "Graphical User Interface", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Determine is the GUI is active:  \nAnnounce to the GUI that a design was loaded", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Support", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(note: this is only needed when the design was loaded through the odb API and not via ``read_def``", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Support", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "via ``read_def`` or ``read_db``):", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Support", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To load the results of a DRC report:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Support", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To open the GUI from the command-line (this command does not return until the GUI is closed):", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Opening and closing", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``script`` TCL script to evaluate in the GUI.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Opening and closing", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``interactive`` indicates if true the GUI should open in an interactive session (default), or if", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Opening and closing", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(default), or if false that the GUI would execute the script and return to the terminal.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Opening and closing", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To close the GUI and return to the command-line:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Opening and closing", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To fit the whole layout in the window:  \nTo zoom in our out to a specific region:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``x0, y0`` first corner of the layout area in microns.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x1, y1`` second corner of the layout area in microns.  \nTo zoom in the layout:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``x, y`` new center of layout.  \nTo zoom out the layout:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``x, y`` new center of layout.  \nTo move the layout to new area:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``x, y`` new center of layout.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To change the resolution to a specific value:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``resolution`` database units per pixel.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Layout navigation", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To add a single net to the selected items:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` name of the net to add.  \nTo add several nets to the selected items:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``name_regex`` regular expression of the net names to add.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To add a single instance to the selected items:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` name of the instance to add.  \nTo add several instances to the selected items:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``name_regex`` regular expression of the instance names to add.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To add items at a specific point or in an area:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x, y`` point in the layout area in microns.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x0, y0`` first corner of the layout area in microns.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x1, y1`` second corner of the layout area in microns.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``append`` if ``true`` (the default value) append the new selections to the current selection", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "current selection list, else replace the selection list with the new selections.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To navigate through multiple selected items:  \nReturns: current index of the selected item.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To clear the current set of selected items:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To get the properties for the current selection in the Inspector:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` name of the property. For example, ``Type`` for object type or ``bbox`` for the bounding", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for the bounding box of the object.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To animate the current selection in the Inspector:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``repeat``: indicate how many times the animation should repeat, default value is 0 repeats. If", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is 0 repeats. If the value is 0, the animation will repeat indefinitely.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Selections", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To highlight a net:  \nOptions description:\n- ``name`` name of the net to highlight.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``highlight_group`` group to add the highlighted net to, defaults to ``0``, valid groups are ``0", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "groups are ``0 - 7``.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To highlight an instance:  \nOptions description:\n- ``name`` name of the instance to highlight.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``highlight_group`` group to add the highlighted instance to, defaults to ``0``, valid groups are", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "valid groups are ``0 - 7``.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To clear the highlight groups:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``highlight_group`` group to clear, defaults to ``0``, valid groups are ``-1 - 7``. Use ``-1`` to", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "7``. Use ``-1`` to clear all groups.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Highlighting", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To add a ruler to the layout:  \n1. either press ``k`` and use the mouse to place it visually.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To disable snapping for the ruler when adding, hold the ``Ctrl`` key, and to allow non-horizontal", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "non-horizontal or vertical snapping when completing the ruler hold the ``Shift`` key.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. or use the command:  \nReturns: name of the newly created ruler.  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x0, y0`` first end point of the ruler in microns.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``x1, y1`` second end point of the ruler in microns.\n- ``label`` text label for the ruler.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` name of the ruler.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``euclidian`` ``1`` for euclidian ruler, and ``0`` for regular ruler.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To remove a single ruler:  \nOptions description:\n- ``name`` name of the ruler.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To remove all the rulers:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Rulers", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The currently availble heat maps are:  \n- ``Power``\n- ``Routing``\n- ``Placement``\n- ``IRDrop``", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``IRDrop``  \nTo control the settings in the heat maps:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` is the name of the heatmap.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``option`` is the name of the option to modify. If option is ``rebuild`` the map will be", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the map will be destroyed and rebuilt.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``value`` is the new value for the specified option. This is not used when rebuilding map.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "These options can also be modified in the GUI by double-clicking the underlined display control for", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "display control for the heat map.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To save the raw data from the heat maps ins a comma separated value (CSV) format:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:\n- ``name`` is the name of the heatmap.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``filename`` path to the file to write the data to.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "Heat Maps", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Control the visible and selected elements in the layout:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` is the name of the control. For example, for the power nets option this would be", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this would be ``Signals/Power`` or could be ``Layers/*`` to set the option for all the layers.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``display_type`` is either ``visible`` or ``selectable``", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``value`` is either ``true`` or ``false``", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To check the visibility or selectability of elements in the layout:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` is the name of the control. For example, for the power nets option this would be", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "this would be ``Signals/Power`` or could be ``Layers/*`` to set the option for all the layers.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``display_type`` is either ``visible`` or ``selectable``", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "When performing a batch operation changing the display controls settings, the following commands", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "following commands can be used to save the current state of the display controls and restore them", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and restore them at the end.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Display Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To request user input via the GUI:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Returns: a string with the input, or empty string if canceled.  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``title`` is the title of the input message box.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``question`` is the text for the message box.  \nPause the execution of the script:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Options description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``timeout`` is specified in milliseconds, if it is not provided the pause will last until the", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "will last until the user presses the Continue button.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To open or close a specific layout widget:  \nOptions description:", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- ``name`` of the widget. For example, the display controls would be \"Display Control\".", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "TCL functions", "Header 3": "GUI Controls", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Graphical User Interface", "Header 2": "License", "source": "src/gui/README.md", "file_path": "src/gui/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This tool initializes floorplan constraints, die/core area, and makes tracks.", "metadata": {"Header 1": "Initialize Floorplan", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts on running `ifp` for a sample design of `mpd_top` are as follows:", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "Example scripts", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "Regression tests", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "Regression tests", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "Regression tests", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out\n[GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "FAQs", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Initialize Floorplan", "Header 2": "License", "source": "src/ifp/README.md", "file_path": "src/ifp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The macro placement module in OpenROAD (`mpl`) is based on", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "TritonMacroPlacer, an open-source ParquetFP-based macro cell placer.", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The macro placer places macros/blocks honoring halos, channels\nand cell row \"snapping\".", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Run `global_placement` before macro placement.", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Approximately $\\Bigl\\lceil [{\\frac{numMacros}{3}}]^{1.5} \\Bigr\\rceil$ quadrisections", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the initial placed mixed-size layout are explored and packed using", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "ParquetFP-based annealing. The best resulting floorplan according to a", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "heuristic evaluation function is kept.", "metadata": {"Header 1": "Macro Placement", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts demonstrating how to run TritonMacroPlace on a sample design of `east_west` as", "metadata": {"Header 1": "Macro Placement", "Header 2": "Example scripts", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of `east_west` as follows:", "metadata": {"Header 1": "Macro Placement", "Header 2": "Example scripts", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Macro Placement", "Header 2": "Regression tests", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Macro Placement", "Header 2": "Regression tests", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Macro Placement", "Header 2": "Regression tests", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion]( about this tool.", "metadata": {"Header 1": "Macro Placement", "Header 2": "FAQs", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Macro Placement", "Header 2": "License", "source": "src/mpl/README.md", "file_path": "src/mpl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A hierarchical automatic macro placer for large-scale complex IP blocks, \"Hier-RTLMP\".", "metadata": {"Header 1": "Hierarchical Macro Placement", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This tool builds on the existing RTLMP (`mpl`) framework, adopting a multilevel physical", "metadata": {"Header 1": "Hierarchical Macro Placement", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "planning approach that exploits the hierarchy and data flow inherent in the design RTL.", "metadata": {"Header 1": "Hierarchical Macro Placement", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example of a script demonstrating how to run `mpl2` on a sample design of `bp_fe_top` as follows:", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "Example scripts", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "Regression tests", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "Regression tests", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "Regression tests", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. A. B. Kahng, R. Varadarajan and Z. Wang,", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"RTL-MP: Toward Practical, Human-Quality Chip Planning and Macro Placement\",", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[(.pdf)]( Proc. ACM/IEEE Intl. Symp. on Physical Design, 2022, pp. 3-11.", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. A. B. Kahng, R. Varadarajan and Z. Wang,", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "\"Hier-RTLMP: A hierarchical automatic macro placer for large-scale complex IP blocks.\",", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[(.pdf)]( arXiv preprint arXiv:2304.11761, 2023.", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "References", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion]( about this tool.", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "FAQs", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Hierarchical Macro Placement", "Header 2": "License", "source": "src/mpl2/README.md", "file_path": "src/mpl2/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenDB is a design database to support tools for physical chip design. It", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "was originally developed by Athena Design Systems. Nefelus, Inc. acquired", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the rights to the code and open-sourced it with BSD-3 license in 2019 to support the DARPA", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenROAD project.  \nThe structure of OpenDB is based on the text file formats LEF", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(library) and DEF (design) formats version 5.6.  OpenDB supports a", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "binary file format to save and load the design much faster than using\nLEF and DEF.", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "LEF and DEF.  \nOpenDB is written in C++ 98 with standard library style iterators.", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The classes are designed to be fast enough to base an application on without", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "having to copy them into application-specific structures.", "metadata": {"Header 1": "OpenDB", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "We are still working on documenting the APIs.  We have over 1,800 objects", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and functions that we are still documenting (for both TCL and Python).", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "**Contributions are very welcome in this effort**. Find starting points below.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "After building successfully, run OpenDB Tcl shell using", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "TCL", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`../../build/src/odb/src/swig/tcl/odbtcl`. An example usage:", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "TCL", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find examples on using the API from Tcl under `test/tcl/` directory.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "TCL", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The full set of the Tcl commands exposed can be found under", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "TCL", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`./build/src/swig/tcl/opendb_wrapper.cpp`. Search for `SWIG_prefix`.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "TCL", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "After building successfully, run `openroad -python` to enable the Python", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "Python", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "interpreter. You can find examples on using the API from Python under\n`test/python/` directory.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "Python", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "To list the full set of the Python classes exposed run `openroad -python`\nthen:", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "Python", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "All public database classes are defined in `db.h`. These class definitions", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "provide all functions for examining and modifying the database objects. The", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "database is an object itself, so multiple database objects can exist", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "simultaneously (no global state).", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`dbTypes.h` defines types returned by database class member functions.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "All database objects are in the `odb` namespace.  \n-   `dbChip`\n-   `dbBlock`\n-   `dbTech`", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   `dbTech`\n-   `dbLib`  \nAll database objects have a 32bit object identifier accessed with the", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`dbObject::getOID` base class member function that returns a `uint`. This", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "identifier is preserved across save/restores of the database so it should", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be used to reference database object by data structures instead of pointers", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "if the reference lifetime is across database save/restores. OIDs allow the", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "database to have exactly the same layout across save/restores.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The database distance units are **nanometers** and use the type `uint`.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database API", "Header 3": "C++", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in /test.", "metadata": {"Header 1": "OpenDB", "Header 2": "Regression tests", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The internal description included here is paraphrased from Lukas van Ginneken\nby James Cherry.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by James Cherry.  \nThe database separates the implementation from the interface, and as a result,", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "each class becomes two classes, a public one and a private one. For instance,", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`dbInst` has the public API functions, while class `_dbInst` has the private\ndata fields.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "data fields.  \nThe objects are allocated in dynamically resizable tables, the implementation", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of which is in `dbTable.hpp`. Each table consists of a number of pages,", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "each containing 128 objects. The table contains the body of the `struct`,", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "not a set of pointers. This eliminates most of the pointer overhead while", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "iteration is accomplished by stepping through the table. Thus, grouping these", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "objects does not require a doubly-linked list and saves 16 bytes per object", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "(at the cost of some table overhead). Each object has an id, which is the", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "index into the table. The lowest 7 bits are the index in the page, while", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the higher bits are the page number. Object id's are persistent when saving", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and reading the data model to disk, even as pointer addresses may change.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Everything in the data model can be stored on disk and restored from disk", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "exactly the way it was. An extensive set of equality tests and diff functions", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "make it possible to check for even the smallest deviation. The capability", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to save an exact copy of the state of the system makes it possible to create", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a checkpoint. This is a necessary capability for debugging complex systems.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The code follows the definition of LEF and DEF closely and reflects many of", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the idiosyncrasies of LEF and DEF. The code defines many types of objects", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to reflect LEF and DEF constructs although it sometimes uses different", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "terminology, for instance, the object to represent a library cell is called", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`dbMaster` while the LEF keyword is MACRO.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The data model supports the EEQ and LEQ keywords (i.e., electrically equivalent", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and logically equivalent Masters), which could be useful for sizing. However,", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "it does not support any logic function representation. In general, there is", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "very limited support for synthesis-specific information: no way to represent", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "busses, no way to represent logic function, very limited understanding of", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "signal flow, limited support of timing information, and no support for high", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "level synthesis or test insertion.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The db represents routing as in DEF, representing a trace from point to point", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with a given width. The layout for a net is stored in a class named `dbWire`", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and it requires a special `dbWireDecoder` (which works like an iterator)", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to unpack the data and another `dbWireEncoder` to pack it. The data model", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "does not support a region query and objects that are in the same layer are", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "scattered about the data model and are of different classes.", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This means that whatever tool is using the layout information will have to", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "build its own data structures that are suitable to the layout operations", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of that tool. For instance, the router, the extractor, and the DRC engine", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "would each have to build their unique data structures. This encourages", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "batch mode operation (route the whole chip, extract the whole chip, run\nDRC on the whole chip).", "metadata": {"Header 1": "OpenDB", "Header 2": "Database Internals", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out\n[GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "OpenDB", "Header 2": "FAQs", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "OpenDB", "Header 2": "LICENSE", "source": "src/odb/README.md", "file_path": "src/odb/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The chip-level connections module in OpenROAD (`pad`) is based on the", "metadata": {"Header 1": "Chip-level Connections", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "open-source tool ICeWall. In this utility, either place an IO ring around the", "metadata": {"Header 1": "Chip-level Connections", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "boundary of the chip and connect with either wirebond pads or a bump array.", "metadata": {"Header 1": "Chip-level Connections", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts for running ICeWall functions can be found in `./test`.", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "Example Scripts", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "Regression Tests", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "Regression Tests", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "Regression Tests", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "FAQs", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Chip-level Connections", "Header 2": "License", "source": "src/pad/README.md", "file_path": "src/pad/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "TritonPart is an open-source constraints-driven partitioner.  It can be used to partition a", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "used to partition a hypergraph or a gate-level netlist.", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Start of the art multiple-constraints driven partitioning \u201cmulti-tool\u201d", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Optimizes cost function based on user requirement\n- Permissive open-source license", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Solves multi-way partitioning with following features:", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Multidimensional real-value weights on vertices and hyperedges", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Multilevel coarsening and refinement framework\n- Fixed vertices constraint", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Timing-driven partitioning framework", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Group constraint: Groups of vertices need to be in same block\n- Embedding-aware partitioning", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Features", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "We use Google OR-Tools as our ILP solver.  Please install Google OR-Tools following the", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Dependency", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "following the [instructions](", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "Dependency", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can also check the provided example [here](./examples/min-cut-partitioning).", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "How to partition a hypergraph in the way you would using hMETIS (min-cut partitioning)", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find the provided example [here](./examples/embedding-aware-partitioning).", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "How to perform the embedding-aware partitioning", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find the provided example [here](./examples/timing-aware-partitioning).", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "How to partition a netlist", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "TritonPart : An Open-Source Constraints-Driven Partitioner", "Header 2": "License", "source": "src/par/README.md", "file_path": "src/par/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This utility aims to simplify the process of adding a power grid into a", "metadata": {"Header 1": "PDNGEN", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "floorplan. The aim is to specify a small set of power grid policies to be", "metadata": {"Header 1": "PDNGEN", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "applied to the design, such as layers to use, stripe width and spacing,", "metadata": {"Header 1": "PDNGEN", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "then have the utility generate the actual metal straps. Grid policies can", "metadata": {"Header 1": "PDNGEN", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "be defined over the stdcell area, and over areas occupied by macros.", "metadata": {"Header 1": "PDNGEN", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The `add_sroute_connect` command is employed for connecting pins located", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "outside of a specific power domain to the power ring, especially in cases where", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "multiple power domains are present. During `sroute`, multi-cut vias will be added", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for new connections. The use of fixed vias from the technology file should be", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "specified for the connection using the `add_sroute_connect` command. The use", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of max_rows and max_columns defines the row and column limit for the via stack.", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Switch Name | Description |\n| ----- | ----- |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| ----- | ----- |\n| `-net` | The inner net where the power ring exists. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-outerNet` | The outer net where instances/pins that need to get connected exist. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-layers` |  The metal layers for vertical stripes within inner power ring. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-cut_pitch` | Distance between via cuts when the two layers are parallel, e.g., overlapping", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "e.g., overlapping stdcell rails. (Default:200 200) |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-fixed_vias` | List of fixed vias to be used to form the via stack. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-max_rows` | Maximum number of rows when adding arrays of vias. (Default:10) |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-max_columns` | Maximum number of columns when adding arrays of vias. (Default:10) |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-metalwidths` | Width for each metal layer. |\n| `-metalspaces` | Spacing of each metal layer. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-ongrid` | List of intermediate layers in a via stack to snap onto a routing grid. |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `-insts` | List of all the instances that contain the pin that needs to get connected with power", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with power ring. (Default:nothing) |", "metadata": {"Header 1": "PDNGEN", "Header 2": "Example scripts", "Header 3": "Sroute", "Header 4": "Options", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Currently the following assumptions are made:  \n1. The design is rectangular", "metadata": {"Header 1": "PDNGEN", "Header 2": "Limitations", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. The input floorplan includes the stdcell rows, placement of all macro blocks and IO pins.", "metadata": {"Header 1": "PDNGEN", "Header 2": "Limitations", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. The stdcells rows will be cut around macro placements", "metadata": {"Header 1": "PDNGEN", "Header 2": "Limitations", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "PDNGEN", "Header 2": "License", "source": "src/pdn/README.md", "file_path": "src/pdn/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Place pins on the boundary of the die on the track grid to minimize net", "metadata": {"Header 1": "Pin Placer", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "wirelengths. Pin placement also creates a metal shape for each pin using\nmin-area rules.", "metadata": {"Header 1": "Pin Placer", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "min-area rules.  \nFor designs with unplaced cells, the net wirelength is computed considering", "metadata": {"Header 1": "Pin Placer", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the center of the die area as the unplaced cells' position.", "metadata": {"Header 1": "Pin Placer", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts of `ppl` running on a sample design of `gcd` as follows:", "metadata": {"Header 1": "Pin Placer", "Header 2": "Example scripts", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Pin Placer", "Header 2": "Regression tests", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Pin Placer", "Header 2": "Regression tests", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Pin Placer", "Header 2": "Regression tests", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- This code depends on [Munkres](src/munkres/README.txt).", "metadata": {"Header 1": "Pin Placer", "Header 2": "References", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Pin Placer", "Header 2": "FAQs", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Pin Placer", "Header 2": "License", "source": "src/ppl/README.md", "file_path": "src/ppl/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The IR Drop Analysis module in OpenROAD (`psm`) is based on PDNSim,", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "an open-source static IR analyzer.  \nFeatures:  \n-   Report worst IR drop.", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Report worst current density over all nodes and wire segments in the", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "power distribution network, given a placed and PDN-synthesized design.", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Check for floating PDN stripes on the power and ground nets.", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "-   Spice netlist writer for power distribution network wire segments.  \n| | |\n| - | - |", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| | |\n| - | - |\n| ![Image 1](doc/current_map.jpg) | ![Image 2](doc/IR_map.jpg) |", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "<p style=\"text-align: center;\">(Left): Current Map, (Right): IR drop map</p>", "metadata": {"Header 1": "IR Drop Analysis", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts demonstrating how to run PDNSim on a sample design on `aes` as follows:", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "Example scripts", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "Regression tests", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "Regression tests", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "Regression tests", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "FAQs", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. PDNSIM [documentation](doc/PDNSim-documentation.pdf)", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "References", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Chhabria, V.A. and Sapatnekar, S.S. (no date) The-openroad-project/pdnsim: Power Grid Analysis,", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "References", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Grid Analysis, GitHub. Available at:  (Accessed: 24 July 2023). [(link)](", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "References", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "IR Drop Analysis", "Header 2": "License", "source": "src/psm/README.md", "file_path": "src/psm/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The parasitics extraction module in OpenROAD (`rcx`) is based on the", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "open-source OpenRCX, a Parasitic Extraction (PEX, or RCX) tool that\nworks on OpenDB design APIs.", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "It extracts routed designs based on the LEF/DEF layout model.", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenRCX extracts both Resistance and Capacitance for wires, based on coupling", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "distance to the nearest wire and the track density context over and/or under the", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "wire of interest, as well as cell", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "abstracts.  The capacitance and resistance measurements are based on equations", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of coupling distance interpolated on exact measurements from a calibration", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file, called the Extraction Rules file. The Extraction Rules file (RC technology", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file) is generated once for every process node and corner, using", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a provided utility for DEF wire pattern generation and regression modeling.", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenRCX stores resistance, coupling capacitance and ground (i.e., grounded) capacitance", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "on OpenDB objects with direct pointers to the associated wire and via db", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "objects. Optionally, OpenRCX can generate a `.spef` file.", "metadata": {"Header 1": "Parasitics Extraction", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts demonstrating how to run OpenRCX in the OpenROAD environment", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Example scripts", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "on sample designs can be found in /test. An example flow test taking a sample design", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Example scripts", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "from synthesizable RTL Verilog to final-routed layout in an open-source SKY130 technology", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Example scripts", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is shown below.  \nExample scripts demonstrating how to run the", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Example scripts", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Extraction Rules file generation can be found in this\n[directory](", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Example scripts", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `/test`. For more information, refer to this", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Regression tests", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Regression tests", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Regression tests", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This flow generates an Extraction Rules file (RC tech file, or RC table) for", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenRCX. This file provides resistance and capacitance tables used for RC", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "extraction for a specific process corner.", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The Extraction Rules file (RC technology file) is generated once for every", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "process node and corner automatically.", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The detailed documentation can be found [here](doc/calibration.md).", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "Extraction Rules File Generation", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "FAQs", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](../../LICENSE) file.", "metadata": {"Header 1": "Parasitics Extraction", "Header 2": "License", "source": "src/rcx/README.md", "file_path": "src/rcx/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The restructure module in OpenROAD (`rmp`) is based on", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "an interface to ABC for local resynthesis. The package allows", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "logic restructuring that targets area or timing. It extracts a cloud of logic", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "using the OpenSTA timing engine, and passes it to ABC through `blif` interface.", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Multiple recipes for area or timing are run to obtain multiple structures from ABC;", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the most desirable among these is used to improve the netlist.", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The ABC output is read back by a `blif` reader which is integrated to OpenDB.", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`blif` writer and reader also support constants from and to OpenDB. Reading", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "back of constants requires insertion of tie cells which should be provided", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "by the user as per the interface described below.", "metadata": {"Header 1": "Restructure", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example scripts on running `rmp` for a sample design of `gcd` as follows:", "metadata": {"Header 1": "Restructure", "Header 2": "Example scripts", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Restructure", "Header 2": "Regression tests", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Restructure", "Header 2": "Regression tests", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Restructure", "Header 2": "Regression tests", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Restructure", "Header 2": "FAQs", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Restructure", "Header 2": "License", "source": "src/rmp/README.md", "file_path": "src/rmp/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Gate Resizer commands are described below.  The `resizer` commands stop when", "metadata": {"Header 1": "Gate Resizer", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the design area is `-max_utilization util` percent of the core area. `util`", "metadata": {"Header 1": "Gate Resizer", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is between 0 and 100.  The `resizer` stops and reports an error if the max\nutilization is exceeded.", "metadata": {"Header 1": "Gate Resizer", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A typical `resizer` command file (after a design and Liberty libraries have", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Example scripts", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "been read) is shown below.  \nNote that OpenSTA commands can be used to report timing metrics before", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Example scripts", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "or after resizing the design.", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Example scripts", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Regression tests", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Regression tests", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Gate Resizer", "Header 2": "Regression tests", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Gate Resizer", "Header 2": "FAQs", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Gate Resizer", "Header 2": "License", "source": "src/rsz/README.md", "file_path": "src/rsz/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Tapcell and endcap insertion.", "metadata": {"Header 1": "Tapcell", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find script examples for both 45nm and 14nm in `./etc/scripts`", "metadata": {"Header 1": "Tapcell", "Header 2": "Example scripts", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Tapcell", "Header 2": "Regression tests", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Tapcell", "Header 2": "Regression tests", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Tapcell", "Header 2": "Regression tests", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Tapcell", "Header 2": "FAQs", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Tapcell", "Header 2": "License", "source": "src/tap/README.md", "file_path": "src/tap/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This module contains functionality to read, and modify information", "metadata": {"Header 1": "Read UPF Utility", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "from Unified Power Format (UPF) files.", "metadata": {"Header 1": "Read UPF Utility", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Example script demonstrating how to run `upf` related commands can be found here:", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "Example scripts", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "There are a set of regression tests in `./test`. For more information, refer to this", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "Regression tests", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "refer to this [section](../../README.md#regression-tests).", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "Regression tests", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Simply run the following script:", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "Regression tests", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Check out [GitHub discussion](\nabout this tool.", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "FAQs", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "BSD 3-Clause License. See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Read UPF Utility", "Header 2": "License", "source": "src/upf/README.md", "file_path": "src/upf/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In this tutorial, we introduce how to use distributed detailed routing with a Kubernetes cluster. We", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "cluster. We will be using a cluster running in google cloud, but the process is similar to using", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is similar to using any Kubernetes cluster.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![alt_text](gsd.jpg \"System Components\")", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The Diagram above shows four main components to run distributed routing:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The leader: responsible for orchestrating the detailed routing process through creating the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "creating the routing jobs that the workers need to handle and aggregating the routed chunks.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The load balancer: the leader sends the needed jobs to the load balancer which is responsible for", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is responsible for balancing the jobs fairly among the workers and handle failed ones.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The workers: are the components that actually do the detailed routing for the jobs assigned by", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "jobs assigned by the leader through the balancer.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Network File System (NFS): has a shared directory accessible by all the other components of the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "components of the system allowing them to exchange routing data.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "General System Design", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![alt_text](create_cluster.gif \"Creating a cluster\")", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Sign in to your Google cloud console dashboard.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* At the top left, select the navigation menu represented by the three lines icon.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Click \u201cKubernetes Engine\u201d from the menu.\n* Click the \u201cCreate\u201d icon at the top.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* From the pop-up, select \u201cConfigure\u201d for a GKE standard.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Select the \u201cCluster basics\u201d section from the leftside menu, then:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Choose the name of the cluster.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Choose the location type as zonal and select the appropriate zone[^1].", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Under the \u201cdefault-pool\u201d section from the leftside menu select \u201cNodes\u201d, then:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* You can configure the type of the machine that your Kuberenets pods would be running on. It is", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "running on. It is worth noting that a pod (worker/balancer) can acquire a number of CPUs  &lt;= the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of CPUs  &lt;= the number of cpus available in the machine selected at this stage. This also", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "stage. This also applies for the memory.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* This is all what we need, now click \u201cCreate\u201d at the bottom of the page.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* As the cluster is being created, we move on to setting up a shared folder on a NFS.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up the cluster on Google Cloud", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A shared folder on a NFS is used to share routing updates between the leader and the workers. There", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the workers. There are multiple tutorials for setting up a network shared folder; the link below", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the link below shows how to create such folder. Two things to consider at this step:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. The IP of the NFS server must be kept to be used in further steps.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. The folder will be mounted to the leader\u2019s machine. Mounting is also explained in the tutorial.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. The machine should be in the same zone of the cluster[^1].  \n[", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "**N.B:** Since we are using google cloud, we set up our shared folder on a VM instance and record", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "instance and record its internal IP to be used in later steps.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Setting up a shared folder in a Network File System (NFS)", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "In the first step, we created a cluster on Google cloud. In this step we connect to this cluster and", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to this cluster and configure it.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "![alt_text](connect_to_cluster.gif \"Connecting to cluster\")  \n1. Go to your google cloud console.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. On the top right to the left of the notification icon, click the \u201cActivate cloud shell\u201d icon.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. Right above the terminal on the right, click the \u201cOpen editor\u201d button and wait for it to load.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. When it is done loading use the following command to autogenerate the kubeconfig that will allow", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that will allow you to access your cluster using \u201ckubectl\u201d commands:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "gcloud container clusters get-credentials <cluster name> --zone <cluster zone>", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "5. Now your cluster is connected to your Google cloud CLI.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "4. The file [k8s-drt.yaml](../test/Distributed/k8s-drt.yaml) is an example configuration file.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "configuration file. **However**, you need to replace *${SHARED_FOLDER_PATH}* and *${NFS_SERVER_IP}*", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "*${NFS_SERVER_IP}* with the actual values.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Every section of the configuration file is separated by \u201c---\u201d", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The first section of the file is a service with the name \u201cworkers\u201d, this service is responsible", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is responsible for creating the domain name for the auto discovery of the workers by the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the workers by the loadbalancer node. The domain name is the exact same name of the service, in", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the service, in this case \u201cworkers\u201d. Furthermore, the port of the domain server is the same as", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is the same as the port of the service, in this case \u201c1111\u201d.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The second section of the configuration creates a StatefulSet of workers. This section has many", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "section has many important configurations listed below:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. The value of \u201creplicas\u201d under \u201cspec\u201d represents the number of workers that will be created in", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "will be created in the cluster.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. The value of \u201cserviceName\u201d under \u201cspec\u201d must match the value of the service name in the first", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "name in the first section.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3.  Under \u201cspec\u201d / \u201ctemplate\u201d / \u201cspec\u201d / \u201ccontainers\u201d:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. \u201cimage\u201d must have the value of openroad docker image directory on docker hub.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Under \u201ccommand\u201d, you can find two commands, the first runs openroad. The second runs the tcl", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "second runs the tcl file in the shared directory. It\u2019s necessary to change the directory to match", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "directory to match your shared folder directory.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. Under \u201cvolumeMounts\u201d, the value of \u201cmountPath\u201d must match the path of the shared directory.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "4. Under \u201cenv\u201d for the \u201cvalue\u201d under the name: \u201cMY_POD_CPU\u201d determines the thread count that", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "thread count that openroad will be using.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "5. Under \u201cresources\u201d / \u201crequests\u201d the value of \u201ccpu\u201d determines the number of cpus assigned to the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "assigned to the worker pod. Note that this value should at least match the number provide for the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "provide for the thread count. Further, this value must not exceed the maximum number of cpus of the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of cpus of the machines used for the cluster.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "6. Under \u201clifecycle\u201d / \u201cpreStop\u201d / \u201cexec\u201d / \u201ccommand\u201d you should change the directory of the shared", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the shared folder to match yours.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "4. Under \u201cvolumes\u201d / \u201cnfs\u201d:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "7. The value of \u201cserver\u201d must match the value of the IP of the machine that has your NFS. Since we", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "your NFS. Since we are making the tutorial for google cloud, we use the internal IP of the NFS", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "IP of the NFS machine.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "8. For the value of \u201cpath\u201d, change the directory of the shared folder to match yours.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The third section of the configuration file creates the pod that runs the loadbalancer. The", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "loadbalancer. The configuration of this section is very similar to what is explained for the second", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for the second section; therefore, no further explanation is needed.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* The fourth section creates the service that connects the pods with the distributed routing", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "distributed routing leader. The important value in this section is \u201cnodePort\u201d under \u201cspec\u201d /", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "under \u201cspec\u201d / \u201cports\u201d. This value should be kept to be used later in the leader TCL file.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* After editing the file, run the following command in Google cloud console terminal:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Explaining configuration file:", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For the leader to communicate with the cluster, we need to supply:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. The value of the nodePort as discussed in the configuration file section.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. The IP of any of the virtual machines that carries the workers. The easiest method to obtain", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "method to obtain that is to enter the following command in the Google cloud console shell:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The output will carry the IPs of all the up workers and the balancer. Get any of the IPs of the", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of the IPs of the workers and keep it for the next step.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Configuring the cluster", "Header 3": "Communicating with the cluster", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "An example of the leader tcl file could found at this", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "could found at this [link](../test/Distributed/example_leader.tcl). The important parameters to", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "parameters to change are the following in the detailed_route command:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* remote_host: the IP that you obtained in the previous section.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* remote_port: the value of the nodePort from the previous section.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* cloud_size: the number of workers as been determined in the yaml script.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* shared_volume: the mount path of the nfs shared folder in the leader machine.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "**N.B:** It is important to make sure that the leader is the last node in the system to run. You", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "system to run. You can check that the Kubernetes nodes are all running using the following command", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "following command in the Google cloud terminal:", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The output will contain all the pods with their status. Make sure that they are all running.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Leader TCL file", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "<!-- . -->", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Notes", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "[^1]: It is important to note that in this tutorial, we make the router leader, the shared NFS", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Notes", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the shared NFS folder, and the cluster all use the same zone on google cloud.", "metadata": {"Header 1": "Documentation for distributed detailed routing with Kubernetes and Google cloud.", "Header 2": "Notes", "source": "src/drt/doc/Distributed.md", "file_path": "src/drt/doc/Distributed.md", "file_name": "Distributed.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __skip_initial_place__ : Skip the initial placement (BiCGSTAB solving) before Nesterov placement.", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Flow Control", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Nesterov placement. IP improves HPWL by ~5% on large designs.", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Flow Control", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __incremental__ : Enable the incremental global placement. Users would need to tune other", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Flow Control", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "need to tune other parameters (e.g. init_density_penalty) with the pre-placed solutions.", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Flow Control", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __bin_grid_count__ : Set bin grid's count manually. Default: Defined by internal algorithm.", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "internal algorithm. [64,128,256,512,..., int]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __density__ : Set target density. Default: 0.70 [0-1, float]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __init_density_penalty__ : Set initial density penalty. Default : 8e-5 [1e-6 - 1e6, float]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __min_phi_coef__ : Set pcof_min(\u00b5_k Lower Bound). Default: 0.95 [0.95-1.05, float]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __max_phi_coef__ : Set pcof_max(\u00b5_k Upper Bound). Default: 1.05 [1.00-1.20, float]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __overflow__ : Set target overflow for termination condition. Default: 0.1 [0-1, float]", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Tuning Parameters", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* __verbose_level__ [0-10, int] : Set verbose level for RePlAce. Default: 1", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Other Options", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Note that all of the TCL commands are defined in the\n[../src/replace.tcl](\nand\n[../src/replace.i](", "metadata": {"Header 1": "OpenROAD Tcl Usage (global_placement)", "Header 2": "Other Options", "source": "src/gpl/doc/TclCommands.md", "file_path": "src/gpl/doc/TclCommands.md", "file_name": "TclCommands.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "MPL2 debug messages are divided in:\n- 4 groups according to HierRTLMP flow stages.", "metadata": {"Header 1": "MPL2 Debug Messages", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- 1 group for the special case in which bus planning is used.", "metadata": {"Header 1": "MPL2 Debug Messages", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Group Name: `multilevel_autoclustering`\n- Levels:\n1. Overall steps of the stage.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Multilevel Autoclustering", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Include in logs:\n* Macro signatures;\n* Connections of candidate clusters to be merged.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Multilevel Autoclustering", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Group Name: `coarse_shaping`\n- Levels:\n1. Overall steps of the stage;\n2. Log clusters' tilings.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Coarse Shaping", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Group Name: `fine_shaping`\n- Levels:\n1. Overall steps of the stage;", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Fine Shaping", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Details of the shapes of each cluster's children.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Fine Shaping", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Group Name: `hierarchical_macro_placement`\n- Levels:\n1. Overall steps of the stage.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Hierarchical Macro Placement", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Include in logs:\n* Clusters' connections;", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Hierarchical Macro Placement", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Simulated annealing results for both SoftMacro and HardMacro.", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Hierarchical Macro Placement", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Special case for bus planning with a single level.\n- Group Name: `bus_planning`", "metadata": {"Header 1": "MPL2 Debug Messages", "Header 2": "Groups", "Header 3": "Bus Planning", "source": "src/mpl2/doc/debugMessages.md", "file_path": "src/mpl2/doc/debugMessages.md", "file_name": "debugMessages.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For example `add_pitchDiag` in object `DbTechLayer`.", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|   | Action                                                 | File              | Source Code", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| Source Code                                                                        |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|---|--------------------------------------------------------|-------------------|-----------------", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "--|------------------------------------------------------------------------------------|", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 1 | Add Fields at the .h file                              | `dbTechLayer.h`   |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "|                                                                                    |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 2 | Define a keyword for db rev number                     | `dbDatabase.h`    | `#define", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `#define ADS_DB_DF58 52`                                                           |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 3 | Set the current rev number same as                     | `dbDatabase.h`    | `#define", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `#define ADS_DB_SCHEMA_MINOR 52`                                                   |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 4 | Stream in new fields Conditionally upon Schema number  | `dbTechLayer.cpp` | `if (", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { stream >> layer._pitchDiag;` |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 5 | Stream out new fields Conditionally upon Schema number | `dbTechLayer.cpp` | `if (", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { stream << layer._pitchDiag;` |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 6 | Conditionally Diff new fields                          | `dbTechLayer.cpp` | `if (", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { DIFF_FIELD(_pitchDiag);`     |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 7 | Conditionally Diff Out new fields                      | `dbTechLayer.cpp` | `if (", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `if ( stream.getDatabase()->isSchema(ADS_DB_DF58) ) { DIFF_OUT_FIELD(_pitchDiag);` |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 8 | Created access APIs to the fields                      | `dbTechLayer.cpp` |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "`dbTechLayer.cpp` | `\"dbTechLayer::getPitchDiag(), dbTechLayer::setPitchDiag( int pitch )\"`", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "pitch )\"`            |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| 9 | Add new APIs in include/db.h                           | db.h              | `class", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "| `class dbTechLayer`                                                                |", "metadata": {"Header 1": "Adding new fields in DB Object", "source": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_path": "src/odb/doc/OpenDB-AddFieldsInDbObjects.md", "file_name": "OpenDB-AddFieldsInDbObjects.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This file specifies the description of the C4 bump configurations file.", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The file is a csv as described below:", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The x and y coordinate specify the center location of the voltage C4 bumps in\nmicro meter.", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "micro meter.  \nThe octagonal c4_edge_length specifies the edge length of the C4 to determine", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the pitch of the RDL layer in micron", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Voltage_value specifies the value of voltage source at the C4 bump. In case", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "there is a need to specify voltage drop in micron", "metadata": {"Header 1": "Voltage source location file description", "source": "src/psm/doc/Vsrc_description.md", "file_path": "src/psm/doc/Vsrc_description.md", "file_name": "Vsrc_description.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This flow generates the RC tech file for OpenRCX. The RC tech file provides", "metadata": {"Header 1": "Extraction Rules Generation Flow for OpenRCX", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "resistance and capacitance tables used for RC extraction for a specific process\ncorner.", "metadata": {"Header 1": "Extraction Rules Generation Flow for OpenRCX", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A. Running OpenRCX `generate_patterns.tcl` to generate layout patterns.  \n- Input: tech LEF", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Input: tech LEF\n- Output: `patterns.def`, `patterns.v`\n- Script: `generate_patterns.tcl`", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Desc: OpenRCX generates many pattern geometries to model various types", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of capacitance and resistance (i.e., multi-conductor) geometric configurations.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "B. Running your favorite extraction tool (i.e., reference extractor) to extract", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "parasitics of the layout patterns.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Input: `patterns.def`, `patterns.v` (if required), and additional files", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "required by the reference extractor.\n- Output: `patterns.spef`\n- Script: Not provided", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Desc: Extract parasitics of the patterns generated by OpenRCX using a reference", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "extractor. This one-time step provides the parasitics of various types of pattern", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "geometries as reference for fitted per-unit length R, C calculation.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "C. Running OpenRCX to convert `patterns.spef` to RC tech file.  \n- Input: `patterns.spef`", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Output: RC tech file\n- Script: `generate_rules.tcl`", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Desc: OpenRCX takes the `.spef` from the reference extractor and performs", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "calculations to produce capacitance and resistance tables for a wide range of", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "wire geometries. The output of this flow is a custom RC tech file for\nOpenRCX.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "OpenRCX.  \nD. Benchmarking - test the accuracy of OpenRCX on the patterns layout.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Input: `patterns.def` and RC tech file\n- Output: `rcx.spef`, `diff_spef.out`", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Script: `ext_patterns.tcl`", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- Desc: Perform parasitic extraction on pattern layout for the calibration", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "using the generated RC tech file. OpenRCX then compares the extracted", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "parasitics with the golden parasitics that had been extracted by the reference extractor", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in Step (B) above.", "metadata": {"Header 1": "The flow involves:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Go to OpenRCX home directory (`./OpenROAD/src/rcx`).", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Navigate to calibration folder `cd calibration`", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. Modify the `user_env.tcl` script in the script directory.", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- TECH_LEF: points to the directory of the tech LEF\n- PROCESS_NODE: the technology node", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- extRules: the name and the location of the OpenRCX tech file", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "4. Run the executable script `run.sh` --> run Steps (A) through (D) of the flow above.", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "- `source run.sh` or `./run.sh`", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "5. The OpenRCX RC tech file can be found in the directory that is specified in the extRules", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "in the extRules variable.", "metadata": {"Header 1": "The flow involves:", "Header 2": "How to run:", "source": "src/rcx/doc/calibration.md", "file_path": "src/rcx/doc/calibration.md", "file_name": "calibration.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do refer to the [GUI guide]( and [global routing debugging tips](", "metadata": {"source": "src/grt/doc/messages/0118.md", "file_path": "src/grt/doc/messages/0118.md", "file_name": "0118.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Do refer to the [GUI guide]( and [global routing debugging tips](", "metadata": {"source": "src/grt/doc/messages/0119.md", "file_path": "src/grt/doc/messages/0119.md", "file_name": "0119.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "FastRoute  \nMin Pan, Yue Xu, Yanheng Zhang, Chris Chu  \nContacts: yuexu@iastate.edu  \nIntroduction", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "FastRoute is a global routing tool for VLSI back-end design. It  is based on sequential rip-up and", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "rip-up and re-route (RRR) and a lot of novel techniques. FastRoute 1.0 first uses FLUTE to", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "first uses FLUTE to construct congestion-driven Steiner trees, which will later undergo the edge", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "undergo the edge shifting process to optimize tree structure to reduce congestion. It then uses", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "It then uses pattern routing and maze routing with logistic function based cost function to solve", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "function to solve the congestion problem. FastRoute 2.0 proposed monotonic routing and multi-source", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and multi-source multi-sink maze routing techniques to enhance the capability to reduce congestion.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "reduce congestion. FastRoute 3.0 introduced the virtual capacity technique to adaptively change the", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "change the capacity associated with each global edge to divert wire usage from highly congested", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "highly congested regions to less congested regions. FastRoute 4.0 proposed via-aware Steiner tree,", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Steiner tree, 3-bend routing and a delicate layer assignment algorithm to effectively reduce via", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "reduce via count while maintaining outstanding congestion reduction capability. FastRoute 4.1", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "FastRoute 4.1 simplifies the way the virtual capacities are updated and applies a single set of", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a single set of tuning parameters to all benchmark circuits.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Literature", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "1. Chris Chu and Yiu-Chung Wong, FLUTE: Fast Lookup Table Based Rectilinear Steiner Minimal Tree", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Minimal Tree Algorithm for VLSI Design. In IEEE Transactions on Computer-Aided Design, vol. 27, no.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "vol. 27, no. 1, pages 70-83, January 2008.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "2. Min Pan and Chris Chu, FastRoute: A Step to Integrate Global Routing into Placement. IEEE/ACM", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Placement. IEEE/ACM International Conference on Computer-Aided Design, pages 464-471, 2006.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "3. Min Pan and Chris Chu, FastRoute 2.0: A High-quality and Efficient Global Router. Asian and", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Router. Asian and South Pacific Design Automation Conference, pages 250-255, 2007.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "4. Yanheng Zhang, Yue Xu and Chris Chu, FastRoute 3.0: A Fast and High Quality Global Router Based", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Global Router Based on Virtual Capacity. IEEE/ACM International Conference on Computer-Aided", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "on Computer-Aided Design, pages 344-349, 2008.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "5. Yue Xu, Yanheng Zhang and Chris Chu. \"FastRoute 4.0: Global Router with Efficient Via", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with Efficient Via Minimization. Asian and South Pacific Design Automation Conference, pages", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Conference, pages 576-581, 2009.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "6. Min Pan, Yue Xu, Yanheng Zhang and Chris Chu. \"FastRoute: An Efficient and High-Quality Global", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "High-Quality Global Router. VLSI Design, Article ID 608362, 2012.", "metadata": {"source": "src/grt/src/fastroute/README.md", "file_path": "src/grt/src/fastroute/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This is an automatic code generation tool for OpenDB objects and Iterators. To test the tool you can", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the tool you can use the following command", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Where schema.json is the json file that includes the requirements, src is the source files", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is the source files directory, include is the include directory, and templates is the directory", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "is the directory including the jinja templates for the classes.", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Empty sections are removed by default from the output.  If you need to add someting to a section", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to a section that is currently empty, you can run the generator with --keep_empty to preserve them.", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "to preserve them.  Once the section is filled in, the flag can be dropped and the code regnerated", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "the code regnerated to remove the remaining empty sections.", "metadata": {"Header 1": "Automatic Code Generator", "source": "src/odb/src/codeGenerator/README.md", "file_path": "src/odb/src/codeGenerator/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Si2 DEF parser 5.8-p027 with CMake support  \nSee lefdefReadme.txt", "metadata": {"source": "src/odb/src/def/README.md", "file_path": "src/odb/src/def/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Si2 LEF parser 5.8-p027 with CMake support  \nSee lefdefReadme.txt", "metadata": {"source": "src/odb/src/lef/README.md", "file_path": "src/odb/src/lef/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "For running the python unit tests you will need to install first *testtools* and *unittest-parallel*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "Running tests", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "*unittest-parallel* which enables concurrent unit testing", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "Running tests", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Then, you can run the unit tests  in sequence by running  \nor in parallel by running", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "Running tests", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "**Note**: The test cases within each Unit Test run in parallel in both situations", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "Running tests", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "--------------------------------------------------------------------------", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "Running tests", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The directory unitTestsPython includes unit tests for OpenDB Python APIs. Any test file starts with", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "file starts with 'Test' followed by the test target.", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "This includes `TestCase` class which inherits from `unittest.TestCase` with additional", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with additional functionalities:", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `changeAndTest(self,obj,SetterName,GetterName,expectedVal,*args)`which is a function for changing", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for changing a value and testing for the effect of that change where:", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `obj` is the object to be tested", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `SetterName` is the name of the function to be called for changing a value", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `GetterName` is the name of the function to be called for testing the effect", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `expectedVal` is the expected value for the testing", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `*args` are the arguments passed to the `SetterName` function", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "So, in the end, the expected behavior is:", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `check(self,obj,GetterName,expectedVal,*args)` which tests against expected value", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `change(self,obj,SetterName,*args)` which changes a value in the object", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `main()` runs the `TestCase` in sequential order", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `mainParallel(Test)` runs the passed `Test` class in parallel", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "odbUnitTest.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "A set of functions for creating simple db instances to be used for testing.  You can find the", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "helper.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "You can find the description of each function in the comments", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "helper.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Unit test class for testing dbNet. It inherits from `odbUnitTest.TestCase` . it consists of", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `setUp(self)` function to be called before each test case. Here, we create the database with the", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "database with the desired chip, block, masters, instances and nets.", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `tearDown(self)` function to be called after each test case. Here, we destroy our db.", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_*(self)` the test cases functions. Their names should start with `test` for the unittest", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for the unittest suite to recognize.", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestNet.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Integration test class for testing the `destroy(*args)` function on OpenDB.", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_net` destroying net and testing for the effect on the *block,inst, iterms and", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "iterms and bterms*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_inst` destroying instance and testing for the effect on *block, iterms, net,", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "iterms, net, bterms*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_bterm` destroying bterm and testing for the effect on *block and net*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_block` destroying block and testing for the effect on *block(parent and child", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and child relation), and chip*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_bpin` destroying bpin and testing for the effect on *bterm*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_create_destroy_wire` destroying wire and test for the effect on *net*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_capnode` destroying capnode and test for the effect on *net(node and connected", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "and connected ccsegs)*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_ccseg` destroying ccseg and test for the effect on *node,block and net*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_lib` destroying lib and test for the effect on *db*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_obstruction` destroying obstruction and test for the effect on *block*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_create_regions` creating regions and test for the effect on *block and region(parent and", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "region(parent and child relation)*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_region_child` destroying _ and test for the effect on *block and region(parent)*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_destroy_region_parent` destroying _ and test for the effect on *block*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestDestroy.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Unit Test for dbBlock", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_find` testing the find function with *BTerm, Child, Inst, Net, ITerm, ExtCornerBlock,", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "ExtCornerBlock, nonDefaultRule, Region*", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Testing the ComputeBBox() function through the first call of getBBox:", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_bbox0` testing empty block box\n* `test_bbox1` testing block box with Inst placed", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_bbox2` testing block box with Inst and BPin placed", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_bbox3` testing block box with Inst, BPin and Obstruction placed", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_bbox3` testing block box with Inst, BPin, Obstruction and SWire placed", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBlock.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Unit Test for dbBTerm  \n* `test_idle` testing for idle disconnected  `BTerm` behavior", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBTerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_connect` testing connect function of `BTerm` on `BTerm` and `Net`", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBTerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_disconnect` testing disconnect function of `BTerm` on `BTerm` and `Net`", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestBTerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Unit Test for dbInst  \n* `test_swap_master` testing swap master function", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestInst.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Unit Test for dbITerm  \n* `test_idle` testing for disconnected ITerm without a net", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_connection_from_iterm` testing the connect(ITerm,...) and disconnect functions of ITerm and", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of ITerm and their effect on ITerm and Net", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_connection_from_inst` testing the connect(Inst,...) and disconnect functions of ITerm and", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "of ITerm and their effect on ITerm and Net", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Testing for getAvgXY() function\n* `test_avgxy_R0` testing with default orientation R0", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* `test_avgxy_R90` testing with different orientation R90 for transformation", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "--------------------------", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* multiple core dumps that leads to aborting the process:", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "Header 4": "Problems Found In Testing", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* dbNet.get1st*()\t\t\t(when nothing on top of the list)", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "Header 4": "Problems Found In Testing", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* childRegion.getParent()       (after destroying the parent region)", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "Header 4": "Problems Found In Testing", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "* Implementation of ComputeBBox() is flawed and needs to be reconsidered", "metadata": {"Header 1": "Python Unit Tests", "Header 2": "<u>Tests Structure</u>", "Header 3": "TestITerm.py:", "Header 4": "Problems Found In Testing", "source": "src/odb/test/unitTestsPython/README.md", "file_path": "src/odb/test/unitTestsPython/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Flute3 is an open-source rectilinear Steiner minimum tree heuristic with", "metadata": {"Header 1": "Flute3", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "improvements made by UFRGS students and James Cherry. This tool is used", "metadata": {"Header 1": "Flute3", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "for the calculation of wirelength in `grt` and `rsz`.  \nThe version in this repository uses", "metadata": {"Header 1": "Flute3", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "CMake and C++ namespace, and has dynamic memory allocation. Flute3 can handle nets with any degree.", "metadata": {"Header 1": "Flute3", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The algorithm base is Flute3.1, extracted from the FastRoute4.1 version", "metadata": {"Header 1": "Flute3", "Header 2": "External references (Optional)", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "that was received from <yuexu@iastate.edu> on June 15, 2019,", "metadata": {"Header 1": "Flute3", "Header 2": "External references (Optional)", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "with the BSD-3 open source license as given in the FastRoute\n[website](", "metadata": {"Header 1": "Flute3", "Header 2": "External references (Optional)", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "See [LICENSE](LICENSE) file.", "metadata": {"Header 1": "Flute3", "Header 2": "License", "source": "src/stt/src/flt/README.md", "file_path": "src/stt/src/flt/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "The lef def syntax spec was downloaded from the ISPD contest area for quick reference.", "metadata": {"source": "src/odb/src/def/doc/README.md", "file_path": "src/odb/src/def/doc/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Note ispd uses the files provided by si2 here.", "metadata": {"source": "src/odb/src/def/doc/README.md", "file_path": "src/odb/src/def/doc/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "Si2 makes it clear on their page that downloading the document does not require a license since the", "metadata": {"source": "src/odb/src/def/doc/README.md", "file_path": "src/odb/src/def/doc/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
{"page_content": "a license since the license for use is in the document itself.", "metadata": {"source": "src/odb/src/def/doc/README.md", "file_path": "src/odb/src/def/doc/README.md", "file_name": "README.md", "file_type": ".md"}, "type": "Document"}
